const encoding = "0123456789ABCDEFGHJKMNPQRSTVWXYZ"

function ulid(id: Uint8Array | undefined): string {
  let result = ''

  if (!id) {
    return ''
  }

  result += encoding[(id[0] & 224) >> 5]
  result += encoding[id[0] & 31]
  result += encoding[(id[1] & 248) >> 3]
  result += encoding[((id[1] & 7) << 2) | ((id[2] & 192) >> 6)]
  result += encoding[(id[2] & 62) >> 1]
  result += encoding[((id[2] & 1) << 4) | ((id[3] & 240) >> 4)]
  result += encoding[((id[3] & 15) << 1) | ((id[4] & 128) >> 7)]
  result += encoding[(id[4] & 124) >> 2]
  result += encoding[((id[4] & 3) << 3) | ((id[5] & 224) >> 5)]
  result += encoding[id[5] & 31]

  // 16 bytes of entropy
  result += encoding[(id[6] & 248) >> 3]
  result += encoding[((id[6] & 7) << 2) | ((id[7] & 192) >> 6)]
  result += encoding[(id[7] & 62) >> 1]
  result += encoding[((id[7] & 1) << 4) | ((id[8] & 240) >> 4)]
  result += encoding[((id[8] & 15) << 1) | ((id[9] & 128) >> 7)]
  result += encoding[(id[9] & 124) >> 2]
  result += encoding[((id[9] & 3) << 3) | ((id[10] & 224) >> 5)]
  result += encoding[id[10] & 31]
  result += encoding[(id[11] & 248) >> 3]
  result += encoding[((id[11] & 7) << 2) | ((id[12] & 192) >> 6)]
  result += encoding[(id[12] & 62) >> 1]
  result += encoding[((id[12] & 1) << 4) | ((id[13] & 240) >> 4)]
  result += encoding[((id[13] & 15) << 1) | ((id[14] & 128) >> 7)]
  result += encoding[(id[14] & 124) >> 2]
  result += encoding[((id[14] & 3) << 3) | ((id[15] & 224) >> 5)]
  result += encoding[id[15] & 31]

  return result
}

const dec = new Uint8Array([
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,
  0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
  0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14, 0x15, 0xFF,
  0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C, 0x1D, 0x1E,
  0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,
  0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,
  0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,
  0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
])

function parse(v: string): Uint8Array {
  const result = new Uint8Array(16)

  const vb = new TextEncoder().encode(v)

  // 6 bytes timestamp (48 bits)
  result[0] = (dec[vb[0]] << 5) | dec[vb[1]]
  result[1] = (dec[vb[2]] << 3) | (dec[vb[3]] >> 2)
  result[2] = (dec[vb[3]] << 6) | (dec[vb[4]] << 1) | (dec[vb[5]] >> 4)
  result[3] = (dec[vb[5]] << 4) | (dec[vb[6]] >> 1)
  result[4] = (dec[vb[6]] << 7) | (dec[vb[7]] << 2) | (dec[vb[8]] >> 3)
  result[5] = (dec[vb[8]] << 5) | dec[vb[9]]

  // 10 bytes of entropy (80 bits)
  result[6] = (dec[vb[10]] << 3) | (dec[vb[11]] >> 2)
  result[7] = (dec[vb[11]] << 6) | (dec[vb[12]] << 1) | (dec[vb[13]] >> 4)
  result[8] = (dec[vb[13]] << 4) | (dec[vb[14]] >> 1)
  result[9] = (dec[vb[14]] << 7) | (dec[vb[15]] << 2) | (dec[vb[16]] >> 3)
  result[10] = (dec[vb[16]] << 5) | dec[vb[17]]
  result[11] = (dec[vb[18]] << 3) | dec[vb[19]] >> 2
  result[12] = (dec[vb[19]] << 6) | (dec[vb[20]] << 1) | (dec[vb[21]] >> 4)
  result[13] = (dec[vb[21]] << 4) | (dec[vb[22]] >> 1)
  result[14] = (dec[vb[22]] << 7) | (dec[vb[23]] << 2) | (dec[vb[24]] >> 3)
  result[15] = (dec[vb[24]] << 5) | dec[vb[25]]

  return result
}

const zero = new Uint8Array(16)

export { ulid, parse, zero };
