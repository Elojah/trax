// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/api/grpc/api.proto

package grpc

import (
	context "context"
	fmt "fmt"
	user "github.com/elojah/trax/internal/user"
	dto "github.com/elojah/trax/internal/user/dto"
	_ "github.com/elojah/trax/pkg/gogoproto"
	pbtypes "github.com/elojah/trax/pkg/pbtypes"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("cmd/api/grpc/api.proto", fileDescriptor_09648454b5c2bf6a) }
func init() { golang_proto.RegisterFile("cmd/api/grpc/api.proto", fileDescriptor_09648454b5c2bf6a) }

var fileDescriptor_09648454b5c2bf6a = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xbf, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xcf, 0xa2, 0xa2, 0xd4, 0x91, 0x42, 0x31, 0x52, 0x1a, 0x22, 0xf0, 0x00, 0x12, 0x88,
	0x81, 0xb3, 0x54, 0x94, 0x89, 0x29, 0x94, 0x1f, 0xaa, 0xc4, 0x10, 0x55, 0xca, 0xc2, 0x76, 0x49,
	0xac, 0x8b, 0xe1, 0x2e, 0x36, 0xb6, 0x83, 0xe8, 0xc6, 0x9f, 0xc0, 0xdf, 0xc0, 0xc4, 0x9f, 0xc0,
	0xd8, 0xb1, 0x63, 0xc6, 0x8e, 0xe4, 0xb2, 0x30, 0x76, 0x64, 0x44, 0xb6, 0x2f, 0x39, 0xfb, 0x92,
	0x74, 0x89, 0xee, 0x7d, 0xbf, 0xef, 0x73, 0xef, 0xf9, 0xf9, 0xe5, 0x60, 0x6b, 0x94, 0x8f, 0x49,
	0x22, 0x18, 0x49, 0xa5, 0x18, 0x99, 0x87, 0x58, 0x48, 0xae, 0x39, 0xda, 0x33, 0x71, 0xa7, 0x2d,
	0x3e, 0xa7, 0x24, 0xe5, 0x29, 0xb7, 0xa2, 0x7d, 0x72, 0x7e, 0xe7, 0xc8, 0x38, 0x62, 0xa8, 0xcf,
	0x05, 0x55, 0x84, 0xe6, 0x42, 0x9f, 0x97, 0xc6, 0x03, 0x36, 0xd5, 0x54, 0x4e, 0x93, 0x8c, 0xcc,
	0x14, 0x95, 0x24, 0x95, 0x7c, 0x26, 0x4a, 0xab, 0x1d, 0x5a, 0xe6, 0xa7, 0x74, 0x3a, 0xa1, 0x33,
	0xca, 0x12, 0x96, 0xab, 0xd2, 0x7b, 0x14, 0x7a, 0x63, 0xd3, 0x87, 0xf7, 0xd2, 0xc7, 0x9b, 0x36,
	0x9b, 0x7e, 0x65, 0x3a, 0xd1, 0x8c, 0x4f, 0xcb, 0x9c, 0x87, 0x9b, 0x39, 0x92, 0x67, 0x74, 0xb7,
	0x5b, 0xb5, 0x76, 0xfc, 0x73, 0x1f, 0xde, 0xea, 0xf5, 0x4f, 0xd1, 0x53, 0xb8, 0xd7, 0x67, 0xd3,
	0x14, 0x35, 0xe3, 0xf2, 0xd4, 0xf1, 0x5b, 0x73, 0xea, 0x4e, 0x2d, 0x46, 0x04, 0xde, 0xf9, 0xc0,
	0x94, 0x1e, 0x28, 0x2a, 0xd1, 0x61, 0x3c, 0xd6, 0x3c, 0x5e, 0x85, 0x67, 0xf4, 0x4b, 0xe7, 0x5e,
	0x4d, 0x51, 0x02, 0x3d, 0x83, 0x07, 0xef, 0xa8, 0x1e, 0x4d, 0x2c, 0xe1, 0xfc, 0x75, 0x6c, 0x90,
	0xfd, 0xd8, 0x76, 0x33, 0x40, 0xcf, 0x21, 0x1c, 0x88, 0x71, 0xa2, 0xa9, 0xcd, 0x44, 0x36, 0xb3,
	0x12, 0x82, 0xd4, 0x2e, 0x3c, 0x3c, 0x91, 0x34, 0xd1, 0xf4, 0x74, 0x3d, 0x0a, 0xd4, 0xb6, 0x40,
	0x5d, 0x0e, 0xb0, 0x1e, 0x6c, 0x9a, 0xd6, 0x3c, 0xa8, 0xb5, 0xee, 0x37, 0x44, 0x8e, 0xb6, 0xea,
	0x4a, 0xa0, 0x18, 0x36, 0x6c, 0xf7, 0x27, 0xf6, 0x0a, 0x37, 0xa6, 0x75, 0xd7, 0x95, 0xb2, 0x6e,
	0x6f, 0xa6, 0x27, 0xe8, 0x18, 0x1e, 0x98, 0xb7, 0xbc, 0x37, 0x37, 0x8a, 0xaa, 0xe9, 0xd8, 0xd8,
	0x14, 0x42, 0x75, 0x49, 0x09, 0xf4, 0x02, 0x42, 0x5b, 0xc3, 0x41, 0xa8, 0x1a, 0xd9, 0x9a, 0x6a,
	0xb8, 0x32, 0x2e, 0x81, 0xc0, 0x86, 0x3b, 0xb5, 0x0b, 0xef, 0x7b, 0x73, 0xd8, 0x09, 0xb8, 0xb9,
	0xfa, 0x80, 0xa7, 0x6c, 0x03, 0xde, 0xd0, 0x8c, 0x86, 0x80, 0xa7, 0x6c, 0x01, 0xec, 0x92, 0x9c,
	0xf1, 0x8c, 0x7a, 0x4b, 0x62, 0xc2, 0x70, 0x49, 0x9c, 0xa2, 0x04, 0xea, 0x42, 0xe8, 0x3a, 0xb6,
	0x08, 0xf2, 0x8e, 0xb0, 0x82, 0x5c, 0x51, 0x13, 0xf5, 0xa9, 0xcc, 0x99, 0x52, 0xe6, 0xfa, 0xba,
	0xab, 0x95, 0xf1, 0xb0, 0x4a, 0xb8, 0x09, 0x73, 0xdd, 0x7b, 0x58, 0x25, 0xec, 0xc4, 0x5e, 0xc1,
	0x66, 0xd5, 0x93, 0x5d, 0xd2, 0x56, 0xad, 0xd1, 0xf0, 0x6f, 0x50, 0x29, 0x4a, 0x18, 0xb8, 0x2a,
	0xe1, 0xc1, 0xa1, 0xb8, 0x1d, 0x7e, 0x9d, 0x5f, 0x2e, 0x70, 0x34, 0x5f, 0xe0, 0xe8, 0x6a, 0x81,
	0xa3, 0xeb, 0x05, 0x06, 0xff, 0x16, 0x18, 0x7c, 0x2f, 0x30, 0xf8, 0x55, 0x60, 0xf0, 0xbb, 0xc0,
	0xe0, 0xa2, 0xc0, 0xe0, 0xb2, 0xc0, 0x60, 0x5e, 0x60, 0xf0, 0xa7, 0xc0, 0xe0, 0x6f, 0x81, 0xa3,
	0xeb, 0x02, 0x83, 0x1f, 0x4b, 0x1c, 0x5d, 0x2c, 0x31, 0x98, 0x2f, 0x71, 0x74, 0xb5, 0xc4, 0xd1,
	0xc7, 0x27, 0x29, 0xd3, 0x93, 0xd9, 0x30, 0x1e, 0xf1, 0x9c, 0xd0, 0x8c, 0x7f, 0x4a, 0x26, 0x44,
	0xcb, 0xe4, 0x1b, 0xf1, 0x3f, 0x93, 0xc3, 0xdb, 0xf6, 0xd3, 0xf0, 0xf2, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x04, 0x13, 0xa7, 0x91, 0x3d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Ping
	Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// User
	ListUser(ctx context.Context, in *dto.ListUserReq, opts ...grpc.CallOption) (*dto.ListUserResp, error)
	FetchUser(ctx context.Context, in *dto.FetchUserReq, opts ...grpc.CallOption) (*user.U, error)
	UpdateUser(ctx context.Context, in *dto.UpdateUserReq, opts ...grpc.CallOption) (*user.U, error)
	// Invitation
	CreateInvitation(ctx context.Context, in *dto.CreateInvitationReq, opts ...grpc.CallOption) (*user.U, error)
	ListInvitation(ctx context.Context, in *dto.ListInvitationReq, opts ...grpc.CallOption) (*dto.ListInvitationResp, error)
	// Claims
	FetchClaims(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*user.ClaimAuth, error)
	// Group
	ListGroup(ctx context.Context, in *dto.ListGroupReq, opts ...grpc.CallOption) (*dto.ListGroupResp, error)
	FetchGroup(ctx context.Context, in *dto.FetchGroupReq, opts ...grpc.CallOption) (*user.Group, error)
	CreateGroup(ctx context.Context, in *dto.CreateGroupReq, opts ...grpc.CallOption) (*user.Group, error)
	UpdateGroup(ctx context.Context, in *dto.UpdateGroupReq, opts ...grpc.CallOption) (*user.Group, error)
	DeleteGroup(ctx context.Context, in *dto.DeleteGroupReq, opts ...grpc.CallOption) (*user.Group, error)
	// Roles
	ListRole(ctx context.Context, in *dto.ListRoleReq, opts ...grpc.CallOption) (*dto.ListRoleResp, error)
	CreateRole(ctx context.Context, in *dto.CreateRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error)
	UpdateRole(ctx context.Context, in *dto.UpdateRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error)
	DeleteRole(ctx context.Context, in *dto.DeleteRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error)
	// Roles user
	CreateRoleUser(ctx context.Context, in *dto.CreateRoleUserReq, opts ...grpc.CallOption) (*dto.RoleUserResp, error)
	DeleteRoleUser(ctx context.Context, in *dto.DeleteRoleUserReq, opts ...grpc.CallOption) (*dto.RoleUserResp, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.API/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUser(ctx context.Context, in *dto.ListUserReq, opts ...grpc.CallOption) (*dto.ListUserResp, error) {
	out := new(dto.ListUserResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchUser(ctx context.Context, in *dto.FetchUserReq, opts ...grpc.CallOption) (*user.U, error) {
	out := new(user.U)
	err := c.cc.Invoke(ctx, "/grpc.API/FetchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateUser(ctx context.Context, in *dto.UpdateUserReq, opts ...grpc.CallOption) (*user.U, error) {
	out := new(user.U)
	err := c.cc.Invoke(ctx, "/grpc.API/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateInvitation(ctx context.Context, in *dto.CreateInvitationReq, opts ...grpc.CallOption) (*user.U, error) {
	out := new(user.U)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListInvitation(ctx context.Context, in *dto.ListInvitationReq, opts ...grpc.CallOption) (*dto.ListInvitationResp, error) {
	out := new(dto.ListInvitationResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchClaims(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*user.ClaimAuth, error) {
	out := new(user.ClaimAuth)
	err := c.cc.Invoke(ctx, "/grpc.API/FetchClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListGroup(ctx context.Context, in *dto.ListGroupReq, opts ...grpc.CallOption) (*dto.ListGroupResp, error) {
	out := new(dto.ListGroupResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchGroup(ctx context.Context, in *dto.FetchGroupReq, opts ...grpc.CallOption) (*user.Group, error) {
	out := new(user.Group)
	err := c.cc.Invoke(ctx, "/grpc.API/FetchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateGroup(ctx context.Context, in *dto.CreateGroupReq, opts ...grpc.CallOption) (*user.Group, error) {
	out := new(user.Group)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateGroup(ctx context.Context, in *dto.UpdateGroupReq, opts ...grpc.CallOption) (*user.Group, error) {
	out := new(user.Group)
	err := c.cc.Invoke(ctx, "/grpc.API/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteGroup(ctx context.Context, in *dto.DeleteGroupReq, opts ...grpc.CallOption) (*user.Group, error) {
	out := new(user.Group)
	err := c.cc.Invoke(ctx, "/grpc.API/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRole(ctx context.Context, in *dto.ListRoleReq, opts ...grpc.CallOption) (*dto.ListRoleResp, error) {
	out := new(dto.ListRoleResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRole(ctx context.Context, in *dto.CreateRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error) {
	out := new(dto.RolePermission)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateRole(ctx context.Context, in *dto.UpdateRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error) {
	out := new(dto.RolePermission)
	err := c.cc.Invoke(ctx, "/grpc.API/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRole(ctx context.Context, in *dto.DeleteRoleReq, opts ...grpc.CallOption) (*dto.RolePermission, error) {
	out := new(dto.RolePermission)
	err := c.cc.Invoke(ctx, "/grpc.API/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRoleUser(ctx context.Context, in *dto.CreateRoleUserReq, opts ...grpc.CallOption) (*dto.RoleUserResp, error) {
	out := new(dto.RoleUserResp)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRoleUser(ctx context.Context, in *dto.DeleteRoleUserReq, opts ...grpc.CallOption) (*dto.RoleUserResp, error) {
	out := new(dto.RoleUserResp)
	err := c.cc.Invoke(ctx, "/grpc.API/DeleteRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Ping
	Ping(context.Context, *pbtypes.Empty) (*pbtypes.Empty, error)
	// User
	ListUser(context.Context, *dto.ListUserReq) (*dto.ListUserResp, error)
	FetchUser(context.Context, *dto.FetchUserReq) (*user.U, error)
	UpdateUser(context.Context, *dto.UpdateUserReq) (*user.U, error)
	// Invitation
	CreateInvitation(context.Context, *dto.CreateInvitationReq) (*user.U, error)
	ListInvitation(context.Context, *dto.ListInvitationReq) (*dto.ListInvitationResp, error)
	// Claims
	FetchClaims(context.Context, *pbtypes.Empty) (*user.ClaimAuth, error)
	// Group
	ListGroup(context.Context, *dto.ListGroupReq) (*dto.ListGroupResp, error)
	FetchGroup(context.Context, *dto.FetchGroupReq) (*user.Group, error)
	CreateGroup(context.Context, *dto.CreateGroupReq) (*user.Group, error)
	UpdateGroup(context.Context, *dto.UpdateGroupReq) (*user.Group, error)
	DeleteGroup(context.Context, *dto.DeleteGroupReq) (*user.Group, error)
	// Roles
	ListRole(context.Context, *dto.ListRoleReq) (*dto.ListRoleResp, error)
	CreateRole(context.Context, *dto.CreateRoleReq) (*dto.RolePermission, error)
	UpdateRole(context.Context, *dto.UpdateRoleReq) (*dto.RolePermission, error)
	DeleteRole(context.Context, *dto.DeleteRoleReq) (*dto.RolePermission, error)
	// Roles user
	CreateRoleUser(context.Context, *dto.CreateRoleUserReq) (*dto.RoleUserResp, error)
	DeleteRoleUser(context.Context, *dto.DeleteRoleUserReq) (*dto.RoleUserResp, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Ping(ctx context.Context, req *pbtypes.Empty) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAPIServer) ListUser(ctx context.Context, req *dto.ListUserReq) (*dto.ListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedAPIServer) FetchUser(ctx context.Context, req *dto.FetchUserReq) (*user.U, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUser not implemented")
}
func (*UnimplementedAPIServer) UpdateUser(ctx context.Context, req *dto.UpdateUserReq) (*user.U, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedAPIServer) CreateInvitation(ctx context.Context, req *dto.CreateInvitationReq) (*user.U, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (*UnimplementedAPIServer) ListInvitation(ctx context.Context, req *dto.ListInvitationReq) (*dto.ListInvitationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitation not implemented")
}
func (*UnimplementedAPIServer) FetchClaims(ctx context.Context, req *pbtypes.Empty) (*user.ClaimAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchClaims not implemented")
}
func (*UnimplementedAPIServer) ListGroup(ctx context.Context, req *dto.ListGroupReq) (*dto.ListGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (*UnimplementedAPIServer) FetchGroup(ctx context.Context, req *dto.FetchGroupReq) (*user.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroup not implemented")
}
func (*UnimplementedAPIServer) CreateGroup(ctx context.Context, req *dto.CreateGroupReq) (*user.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedAPIServer) UpdateGroup(ctx context.Context, req *dto.UpdateGroupReq) (*user.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedAPIServer) DeleteGroup(ctx context.Context, req *dto.DeleteGroupReq) (*user.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedAPIServer) ListRole(ctx context.Context, req *dto.ListRoleReq) (*dto.ListRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (*UnimplementedAPIServer) CreateRole(ctx context.Context, req *dto.CreateRoleReq) (*dto.RolePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedAPIServer) UpdateRole(ctx context.Context, req *dto.UpdateRoleReq) (*dto.RolePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedAPIServer) DeleteRole(ctx context.Context, req *dto.DeleteRoleReq) (*dto.RolePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedAPIServer) CreateRoleUser(ctx context.Context, req *dto.CreateRoleUserReq) (*dto.RoleUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleUser not implemented")
}
func (*UnimplementedAPIServer) DeleteRoleUser(ctx context.Context, req *dto.DeleteRoleUserReq) (*dto.RoleUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleUser not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Ping(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUser(ctx, req.(*dto.ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.FetchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/FetchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchUser(ctx, req.(*dto.FetchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateUser(ctx, req.(*dto.UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateInvitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateInvitation(ctx, req.(*dto.CreateInvitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ListInvitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListInvitation(ctx, req.(*dto.ListInvitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/FetchClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchClaims(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ListGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListGroup(ctx, req.(*dto.ListGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.FetchGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/FetchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchGroup(ctx, req.(*dto.FetchGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateGroup(ctx, req.(*dto.CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateGroup(ctx, req.(*dto.UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteGroup(ctx, req.(*dto.DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ListRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRole(ctx, req.(*dto.ListRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRole(ctx, req.(*dto.CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateRole(ctx, req.(*dto.UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteRole(ctx, req.(*dto.DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateRoleUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRoleUser(ctx, req.(*dto.CreateRoleUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.DeleteRoleUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/DeleteRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteRoleUser(ctx, req.(*dto.DeleteRoleUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _API_Ping_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _API_ListUser_Handler,
		},
		{
			MethodName: "FetchUser",
			Handler:    _API_FetchUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _API_UpdateUser_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _API_CreateInvitation_Handler,
		},
		{
			MethodName: "ListInvitation",
			Handler:    _API_ListInvitation_Handler,
		},
		{
			MethodName: "FetchClaims",
			Handler:    _API_FetchClaims_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _API_ListGroup_Handler,
		},
		{
			MethodName: "FetchGroup",
			Handler:    _API_FetchGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _API_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _API_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _API_DeleteGroup_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _API_ListRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _API_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _API_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _API_DeleteRole_Handler,
		},
		{
			MethodName: "CreateRoleUser",
			Handler:    _API_CreateRoleUser_Handler,
		},
		{
			MethodName: "DeleteRoleUser",
			Handler:    _API_DeleteRoleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/api/grpc/api.proto",
}
