// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/trax/cmd/api/grpc/api.proto

package grpc

import (
	context "context"
	fmt "fmt"
	user "github.com/elojah/trax/internal/user"
	dto "github.com/elojah/trax/internal/user/dto"
	_ "github.com/elojah/trax/pkg/gogoproto"
	pbtypes "github.com/elojah/trax/pkg/pbtypes"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/trax/cmd/api/grpc/api.proto", fileDescriptor_e44be87dd4a64048)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/trax/cmd/api/grpc/api.proto", fileDescriptor_e44be87dd4a64048)
}

var fileDescriptor_e44be87dd4a64048 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xef, 0xab, 0x18, 0xac, 0x96, 0x21, 0xc0, 0x92, 0xe1, 0x8e, 0x6c, 0xd8, 0xa2,
	0x55, 0xd9, 0x01, 0x15, 0x81, 0xc4, 0x50, 0x21, 0xf1, 0x00, 0x69, 0x62, 0x52, 0x43, 0x1b, 0x1b,
	0xc7, 0x95, 0xe8, 0xc6, 0xc0, 0x03, 0xf0, 0x18, 0x3c, 0x02, 0x63, 0xc7, 0x8e, 0x1d, 0x3b, 0x12,
	0x67, 0x61, 0xec, 0xc8, 0x88, 0xe2, 0xba, 0x50, 0xfe, 0x14, 0x75, 0xb1, 0xee, 0x39, 0x3a, 0x3f,
	0x1d, 0xdf, 0x8b, 0xf7, 0x12, 0xae, 0xbb, 0x83, 0x0e, 0x89, 0x44, 0x9f, 0xb2, 0x9e, 0xb8, 0x0e,
	0xbb, 0x54, 0xab, 0xf0, 0x8e, 0x46, 0xfd, 0x98, 0x86, 0x92, 0xd3, 0x44, 0xc9, 0xa8, 0x1c, 0x88,
	0x54, 0x42, 0x0b, 0xbf, 0x52, 0xea, 0x80, 0xae, 0x80, 0xe4, 0x4d, 0x42, 0x13, 0x91, 0x08, 0x9b,
	0xb5, 0xd3, 0x1c, 0x0b, 0xc8, 0x1f, 0x80, 0xec, 0xe8, 0xa1, 0x64, 0x19, 0x65, 0x7d, 0xa9, 0x87,
	0x2e, 0xbf, 0xaa, 0x80, 0xa7, 0x9a, 0xa9, 0x34, 0xec, 0xd1, 0x41, 0xc6, 0x94, 0x7d, 0x1c, 0xb0,
	0xbf, 0x16, 0xc0, 0x52, 0xcd, 0x3f, 0x3a, 0x0e, 0xd6, 0x42, 0x62, 0x2d, 0xa8, 0x54, 0xe2, 0x8a,
	0xf7, 0x98, 0xe3, 0x9a, 0x6b, 0x73, 0xcb, 0x75, 0xf5, 0x87, 0x7f, 0xf8, 0xff, 0x61, 0xfb, 0xcc,
	0xdf, 0xc5, 0x95, 0x36, 0x4f, 0x13, 0x7f, 0x93, 0xb8, 0xc5, 0x49, 0xab, 0x5c, 0x3c, 0xf8, 0xa6,
	0xfd, 0x06, 0xae, 0x9e, 0x30, 0x1d, 0x75, 0xdb, 0xf3, 0x72, 0x7f, 0x9b, 0xc4, 0x5a, 0x90, 0x65,
	0xeb, 0x82, 0xdd, 0x06, 0x35, 0x62, 0x8f, 0xb0, 0x08, 0x35, 0x71, 0xed, 0x52, 0xc6, 0xa1, 0x66,
	0x0b, 0x63, 0xc7, 0x52, 0x5f, 0xbc, 0x5f, 0xb0, 0x3a, 0xae, 0x1e, 0x2b, 0x16, 0x6a, 0xd6, 0xb2,
	0x3f, 0x76, 0x5d, 0xcb, 0x56, 0x09, 0x55, 0xe7, 0x90, 0xcb, 0x34, 0x31, 0x3e, 0xe7, 0x99, 0x76,
	0xca, 0xb7, 0xc4, 0xa7, 0x51, 0xe6, 0xb7, 0x7e, 0x78, 0x99, 0x3c, 0x3a, 0x1d, 0xe7, 0xe0, 0x4d,
	0x72, 0xf0, 0xa6, 0x39, 0x78, 0xb3, 0x1c, 0xd0, 0x5b, 0x0e, 0xe8, 0xde, 0x00, 0x7a, 0x32, 0x80,
	0x9e, 0x0d, 0xa0, 0x91, 0x01, 0x34, 0x36, 0x80, 0x26, 0x06, 0xd0, 0x8b, 0x01, 0xf4, 0x6a, 0xc0,
	0x9b, 0x19, 0x40, 0x8f, 0x05, 0x78, 0xa3, 0x02, 0xd0, 0xa4, 0x00, 0x6f, 0x5a, 0x80, 0xd7, 0xd9,
	0xb0, 0x77, 0x6d, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x28, 0x5a, 0x97, 0x1a, 0xc2, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Ping
	Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// User
	FetchProfile(ctx context.Context, in *dto.FetchProfileReq, opts ...grpc.CallOption) (*user.Profile, error)
	UpdateProfile(ctx context.Context, in *dto.UpdateProfileReq, opts ...grpc.CallOption) (*user.Profile, error)
	// Entity
	CreateEntity(ctx context.Context, in *dto.CreateEntityReq, opts ...grpc.CallOption) (*user.Entity, error)
	ListEntity(ctx context.Context, in *dto.ListEntityReq, opts ...grpc.CallOption) (*dto.ListEntityResp, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.API/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchProfile(ctx context.Context, in *dto.FetchProfileReq, opts ...grpc.CallOption) (*user.Profile, error) {
	out := new(user.Profile)
	err := c.cc.Invoke(ctx, "/grpc.API/FetchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateProfile(ctx context.Context, in *dto.UpdateProfileReq, opts ...grpc.CallOption) (*user.Profile, error) {
	out := new(user.Profile)
	err := c.cc.Invoke(ctx, "/grpc.API/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateEntity(ctx context.Context, in *dto.CreateEntityReq, opts ...grpc.CallOption) (*user.Entity, error) {
	out := new(user.Entity)
	err := c.cc.Invoke(ctx, "/grpc.API/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListEntity(ctx context.Context, in *dto.ListEntityReq, opts ...grpc.CallOption) (*dto.ListEntityResp, error) {
	out := new(dto.ListEntityResp)
	err := c.cc.Invoke(ctx, "/grpc.API/ListEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Ping
	Ping(context.Context, *pbtypes.Empty) (*pbtypes.Empty, error)
	// User
	FetchProfile(context.Context, *dto.FetchProfileReq) (*user.Profile, error)
	UpdateProfile(context.Context, *dto.UpdateProfileReq) (*user.Profile, error)
	// Entity
	CreateEntity(context.Context, *dto.CreateEntityReq) (*user.Entity, error)
	ListEntity(context.Context, *dto.ListEntityReq) (*dto.ListEntityResp, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Ping(ctx context.Context, req *pbtypes.Empty) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAPIServer) FetchProfile(ctx context.Context, req *dto.FetchProfileReq) (*user.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProfile not implemented")
}
func (*UnimplementedAPIServer) UpdateProfile(ctx context.Context, req *dto.UpdateProfileReq) (*user.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedAPIServer) CreateEntity(ctx context.Context, req *dto.CreateEntityReq) (*user.Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedAPIServer) ListEntity(ctx context.Context, req *dto.ListEntityReq) (*dto.ListEntityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Ping(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.FetchProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/FetchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchProfile(ctx, req.(*dto.FetchProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateProfile(ctx, req.(*dto.UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateEntity(ctx, req.(*dto.CreateEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ListEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.API/ListEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListEntity(ctx, req.(*dto.ListEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _API_Ping_Handler,
		},
		{
			MethodName: "FetchProfile",
			Handler:    _API_FetchProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _API_UpdateProfile_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _API_CreateEntity_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _API_ListEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/trax/cmd/api/grpc/api.proto",
}
