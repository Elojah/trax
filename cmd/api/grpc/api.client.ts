// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,optimize_speed,long_type_string
// @generated from protobuf file "cmd/api/grpc/api.proto" (package "grpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { API } from "./api";
import type { DeleteRoleUserReq } from "../../../internal/user/dto/role";
import type { RoleUserResp } from "../../../internal/user/dto/role";
import type { CreateRoleUserReq } from "../../../internal/user/dto/role";
import type { DeleteRoleReq } from "../../../internal/user/dto/role";
import type { UpdateRoleReq } from "../../../internal/user/dto/role";
import type { RolePermission } from "../../../internal/user/dto/role";
import type { CreateRoleReq } from "../../../internal/user/dto/role";
import type { ListRoleResp } from "../../../internal/user/dto/role";
import type { ListRoleReq } from "../../../internal/user/dto/role";
import type { DeleteEntityReq } from "../../../internal/user/dto/entity";
import type { UpdateEntityReq } from "../../../internal/user/dto/entity";
import type { CreateEntityReq } from "../../../internal/user/dto/entity";
import type { Entity } from "../../../internal/user/entity";
import type { FetchEntityReq } from "../../../internal/user/dto/entity";
import type { ListEntityResp } from "../../../internal/user/dto/entity";
import type { ListEntityReq } from "../../../internal/user/dto/entity";
import type { ClaimAuth } from "../../../internal/user/claims";
import type { InviteUserReq } from "../../../internal/user/dto/user";
import type { UpdateUserReq } from "../../../internal/user/dto/user";
import type { U } from "../../../internal/user/user";
import type { FetchUserReq } from "../../../internal/user/dto/user";
import type { ListUserResp } from "../../../internal/user/dto/user";
import type { ListUserReq } from "../../../internal/user/dto/user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../../pkg/pbtypes/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service grpc.API
 */
export interface IAPIClient {
    /**
     * Ping
     *
     * @generated from protobuf rpc: Ping
     */
    ping(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * User
     *
     * @generated from protobuf rpc: ListUser
     */
    listUser(input: ListUserReq, options?: RpcOptions): UnaryCall<ListUserReq, ListUserResp>;
    /**
     * @generated from protobuf rpc: FetchUser
     */
    fetchUser(input: FetchUserReq, options?: RpcOptions): UnaryCall<FetchUserReq, U>;
    /**
     * @generated from protobuf rpc: UpdateUser
     */
    updateUser(input: UpdateUserReq, options?: RpcOptions): UnaryCall<UpdateUserReq, U>;
    /**
     * @generated from protobuf rpc: InviteUser
     */
    inviteUser(input: InviteUserReq, options?: RpcOptions): UnaryCall<InviteUserReq, U>;
    /**
     * Claims
     *
     * @generated from protobuf rpc: FetchClaims
     */
    fetchClaims(input: Empty, options?: RpcOptions): UnaryCall<Empty, ClaimAuth>;
    /**
     * Entity
     *
     * @generated from protobuf rpc: ListEntity
     */
    listEntity(input: ListEntityReq, options?: RpcOptions): UnaryCall<ListEntityReq, ListEntityResp>;
    /**
     * @generated from protobuf rpc: FetchEntity
     */
    fetchEntity(input: FetchEntityReq, options?: RpcOptions): UnaryCall<FetchEntityReq, Entity>;
    /**
     * @generated from protobuf rpc: CreateEntity
     */
    createEntity(input: CreateEntityReq, options?: RpcOptions): UnaryCall<CreateEntityReq, Entity>;
    /**
     * @generated from protobuf rpc: UpdateEntity
     */
    updateEntity(input: UpdateEntityReq, options?: RpcOptions): UnaryCall<UpdateEntityReq, Entity>;
    /**
     * @generated from protobuf rpc: DeleteEntity
     */
    deleteEntity(input: DeleteEntityReq, options?: RpcOptions): UnaryCall<DeleteEntityReq, Entity>;
    /**
     * Roles
     *
     * @generated from protobuf rpc: ListRole
     */
    listRole(input: ListRoleReq, options?: RpcOptions): UnaryCall<ListRoleReq, ListRoleResp>;
    /**
     * @generated from protobuf rpc: CreateRole
     */
    createRole(input: CreateRoleReq, options?: RpcOptions): UnaryCall<CreateRoleReq, RolePermission>;
    /**
     * @generated from protobuf rpc: UpdateRole
     */
    updateRole(input: UpdateRoleReq, options?: RpcOptions): UnaryCall<UpdateRoleReq, RolePermission>;
    /**
     * @generated from protobuf rpc: DeleteRole
     */
    deleteRole(input: DeleteRoleReq, options?: RpcOptions): UnaryCall<DeleteRoleReq, RolePermission>;
    /**
     * Roles user
     *
     * @generated from protobuf rpc: CreateRoleUser
     */
    createRoleUser(input: CreateRoleUserReq, options?: RpcOptions): UnaryCall<CreateRoleUserReq, RoleUserResp>;
    /**
     * @generated from protobuf rpc: DeleteRoleUser
     */
    deleteRoleUser(input: DeleteRoleUserReq, options?: RpcOptions): UnaryCall<DeleteRoleUserReq, RoleUserResp>;
}
/**
 * @generated from protobuf service grpc.API
 */
export class APIClient implements IAPIClient, ServiceInfo {
    typeName = API.typeName;
    methods = API.methods;
    options = API.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Ping
     *
     * @generated from protobuf rpc: Ping
     */
    ping(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * User
     *
     * @generated from protobuf rpc: ListUser
     */
    listUser(input: ListUserReq, options?: RpcOptions): UnaryCall<ListUserReq, ListUserResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUserReq, ListUserResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchUser
     */
    fetchUser(input: FetchUserReq, options?: RpcOptions): UnaryCall<FetchUserReq, U> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchUserReq, U>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser
     */
    updateUser(input: UpdateUserReq, options?: RpcOptions): UnaryCall<UpdateUserReq, U> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserReq, U>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteUser
     */
    inviteUser(input: InviteUserReq, options?: RpcOptions): UnaryCall<InviteUserReq, U> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteUserReq, U>("unary", this._transport, method, opt, input);
    }
    /**
     * Claims
     *
     * @generated from protobuf rpc: FetchClaims
     */
    fetchClaims(input: Empty, options?: RpcOptions): UnaryCall<Empty, ClaimAuth> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ClaimAuth>("unary", this._transport, method, opt, input);
    }
    /**
     * Entity
     *
     * @generated from protobuf rpc: ListEntity
     */
    listEntity(input: ListEntityReq, options?: RpcOptions): UnaryCall<ListEntityReq, ListEntityResp> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListEntityReq, ListEntityResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchEntity
     */
    fetchEntity(input: FetchEntityReq, options?: RpcOptions): UnaryCall<FetchEntityReq, Entity> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchEntityReq, Entity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateEntity
     */
    createEntity(input: CreateEntityReq, options?: RpcOptions): UnaryCall<CreateEntityReq, Entity> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateEntityReq, Entity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateEntity
     */
    updateEntity(input: UpdateEntityReq, options?: RpcOptions): UnaryCall<UpdateEntityReq, Entity> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEntityReq, Entity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteEntity
     */
    deleteEntity(input: DeleteEntityReq, options?: RpcOptions): UnaryCall<DeleteEntityReq, Entity> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteEntityReq, Entity>("unary", this._transport, method, opt, input);
    }
    /**
     * Roles
     *
     * @generated from protobuf rpc: ListRole
     */
    listRole(input: ListRoleReq, options?: RpcOptions): UnaryCall<ListRoleReq, ListRoleResp> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRoleReq, ListRoleResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateRole
     */
    createRole(input: CreateRoleReq, options?: RpcOptions): UnaryCall<CreateRoleReq, RolePermission> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoleReq, RolePermission>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateRole
     */
    updateRole(input: UpdateRoleReq, options?: RpcOptions): UnaryCall<UpdateRoleReq, RolePermission> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRoleReq, RolePermission>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRole
     */
    deleteRole(input: DeleteRoleReq, options?: RpcOptions): UnaryCall<DeleteRoleReq, RolePermission> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRoleReq, RolePermission>("unary", this._transport, method, opt, input);
    }
    /**
     * Roles user
     *
     * @generated from protobuf rpc: CreateRoleUser
     */
    createRoleUser(input: CreateRoleUserReq, options?: RpcOptions): UnaryCall<CreateRoleUserReq, RoleUserResp> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoleUserReq, RoleUserResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRoleUser
     */
    deleteRoleUser(input: DeleteRoleUserReq, options?: RpcOptions): UnaryCall<DeleteRoleUserReq, RoleUserResp> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRoleUserReq, RoleUserResp>("unary", this._transport, method, opt, input);
    }
}
