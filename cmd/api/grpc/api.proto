syntax = "proto3";

package grpc;

option (gogoproto.testgen_all)  = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_registration) = true;

option go_package = "github.com/elojah/trax/cmd/api/grpc";

import "pkg/gogoproto/gogo.proto";

import "pkg/pbtypes/empty.proto";

import "internal/user/group.proto";
import "internal/user/user.proto";
import "internal/user/invitation.proto";
import "internal/user/claims.proto";
import "internal/user/dto/group.proto";
import "internal/user/dto/invitation.proto";
import "internal/user/dto/role.proto";
import "internal/user/dto/user.proto";

service API {
    // Ping
    rpc Ping(pbtypes.Empty) returns (pbtypes.Empty);

    // User
    rpc ListUser(dto.ListUserReq) returns (dto.ListUserResp);
    rpc FetchUser(dto.FetchUserReq) returns (user.U);
    rpc UpdateUser(dto.UpdateUserReq) returns (user.U);

    // Invitation
    rpc CreateInvitation(dto.CreateInvitationReq) returns (user.U);
    rpc ListInvitation(dto.ListInvitationReq) returns (dto.ListInvitationResp);
    rpc DeleteInvitation(dto.DeleteInvitationReq) returns (user.Invitation);

    // Claims
    rpc FetchClaims(pbtypes.Empty) returns (user.ClaimAuth);

    // Group
    rpc ListGroup(dto.ListGroupReq) returns (dto.ListGroupResp);
    rpc FetchGroup(dto.FetchGroupReq) returns (user.Group);
    rpc CreateGroup(dto.CreateGroupReq) returns (user.Group);
    rpc UpdateGroup(dto.UpdateGroupReq) returns (user.Group);
    rpc DeleteGroup(dto.DeleteGroupReq) returns (user.Group);

    // Roles
    rpc ListRole(dto.ListRoleReq) returns (dto.ListRoleResp);
    rpc CreateRole(dto.CreateRoleReq) returns (dto.RolePermission);
    rpc UpdateRole(dto.UpdateRoleReq) returns (dto.RolePermission);
    rpc DeleteRole(dto.DeleteRoleReq) returns (dto.RolePermission);

    // Roles user
    rpc CreateRoleUser(dto.CreateRoleUserReq) returns (dto.RoleUserResp);
    rpc DeleteRoleUser(dto.DeleteRoleUserReq) returns (dto.RoleUserResp);
}
