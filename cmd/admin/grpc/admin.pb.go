// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/trax/cmd/admin/grpc/admin.proto

package grpc

import (
	context "context"
	fmt "fmt"
	entity "github.com/elojah/trax/pkg/entity"
	dto1 "github.com/elojah/trax/pkg/entity/dto"
	_ "github.com/elojah/trax/pkg/gogoproto"
	pbtypes "github.com/elojah/trax/pkg/pbtypes"
	dto "github.com/elojah/trax/pkg/tile/dto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/trax/cmd/admin/grpc/admin.proto", fileDescriptor_c466ab583a6679eb)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/trax/cmd/admin/grpc/admin.proto", fileDescriptor_c466ab583a6679eb)
}

var fileDescriptor_c466ab583a6679eb = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x6b, 0x14, 0x41,
	0x14, 0xc6, 0x77, 0x24, 0x0a, 0x8e, 0x98, 0x84, 0x01, 0x15, 0xb6, 0x78, 0xa5, 0x95, 0xcc, 0xc4,
	0x3b, 0x41, 0x49, 0x21, 0xc4, 0x20, 0x08, 0x22, 0x48, 0x54, 0x2c, 0x65, 0xee, 0xf6, 0x31, 0x19,
	0xb3, 0xbb, 0x33, 0xee, 0x3e, 0x8b, 0xeb, 0xfc, 0x13, 0xfc, 0x33, 0xfc, 0x13, 0x2c, 0x53, 0xa6,
	0xbc, 0x32, 0xa5, 0x3b, 0xdb, 0x58, 0xa6, 0xd4, 0x4e, 0x76, 0x77, 0x3c, 0xbc, 0x8b, 0x9e, 0xd7,
	0x3d, 0x3e, 0xbe, 0xdf, 0xfb, 0x66, 0xbe, 0xc7, 0x1f, 0x18, 0x4b, 0xc7, 0x1f, 0x27, 0x72, 0xea,
	0x0a, 0x85, 0xb9, 0x7b, 0xaf, 0x8f, 0x95, 0xd1, 0x05, 0xbe, 0xdb, 0x1b, 0xab, 0x69, 0x91, 0x29,
	0x9d, 0x15, 0xb6, 0x54, 0xa6, 0xf2, 0xd3, 0x61, 0x94, 0xbe, 0x72, 0xe4, 0xc4, 0x56, 0xa7, 0xa4,
	0xa3, 0x7f, 0xb3, 0xfe, 0xc4, 0x28, 0xe3, 0x8c, 0xeb, 0xed, 0xfd, 0x34, 0x90, 0xe9, 0xfd, 0xf5,
	0x8c, 0x9f, 0xd0, 0xcc, 0x63, 0xad, 0xb0, 0xf0, 0x34, 0x8b, 0xc8, 0x68, 0x33, 0xa4, 0xa6, 0xca,
	0x96, 0x26, 0x32, 0x7b, 0xeb, 0x19, 0xb2, 0x39, 0xaa, 0x8c, 0x9c, 0xaa, 0x91, 0x22, 0x31, 0x5e,
	0x4f, 0x60, 0x49, 0x96, 0x66, 0x8a, 0xb0, 0xf0, 0xb9, 0x26, 0x8c, 0xd0, 0xa3, 0x8d, 0xa0, 0x2e,
	0x48, 0x97, 0xb6, 0xd0, 0x64, 0x5d, 0x6c, 0x30, 0x7d, 0xb8, 0x31, 0xb9, 0x1c, 0x39, 0xfa, 0x79,
	0x85, 0x5f, 0x3d, 0xe8, 0x4e, 0x21, 0xee, 0xf1, 0xeb, 0x2f, 0xac, 0xa9, 0x34, 0xe1, 0x1b, 0x2f,
	0x76, 0x64, 0xec, 0x41, 0xbe, 0xea, 0x7b, 0x48, 0xb7, 0x17, 0xc2, 0xd3, 0xae, 0x4b, 0x31, 0xe2,
	0xbb, 0x47, 0x8e, 0x34, 0xe1, 0xa1, 0x73, 0x27, 0x16, 0x9f, 0xe3, 0xac, 0x16, 0x2b, 0x9e, 0x4b,
	0xcc, 0x5d, 0xbe, 0xf5, 0xd2, 0x96, 0xe6, 0xbf, 0xbe, 0xc7, 0xfc, 0xe6, 0x61, 0x85, 0x9a, 0xf0,
	0xb5, 0xcd, 0xb1, 0x46, 0x12, 0xb7, 0x64, 0x46, 0x4e, 0x2e, 0x69, 0x47, 0xf8, 0x21, 0xbd, 0xfd,
	0x37, 0xb9, 0xf6, 0x42, 0xf2, 0x1b, 0x83, 0xf8, 0xd6, 0x55, 0x79, 0x76, 0x29, 0x6e, 0xf5, 0x6f,
	0x62, 0x9f, 0x6f, 0xc7, 0x25, 0xb1, 0x1b, 0xb1, 0xb4, 0x39, 0x8a, 0x5d, 0xe2, 0xae, 0x1c, 0x9a,
	0x94, 0x0b, 0xe7, 0x3e, 0xdf, 0x19, 0x6c, 0x07, 0xbf, 0x2f, 0x22, 0xee, 0xfc, 0x01, 0x2f, 0xd4,
	0x8e, 0x5e, 0x79, 0xc8, 0x93, 0x67, 0x67, 0x0d, 0x24, 0xf3, 0x06, 0x92, 0xf3, 0x06, 0x92, 0x8b,
	0x06, 0xd8, 0x8f, 0x06, 0xd8, 0xa7, 0x00, 0xec, 0x4b, 0x00, 0xf6, 0x35, 0x00, 0x3b, 0x0d, 0xc0,
	0xce, 0x02, 0xb0, 0x79, 0x00, 0xf6, 0x2d, 0x00, 0xfb, 0x1e, 0x20, 0xb9, 0x08, 0xc0, 0x3e, 0xb7,
	0x90, 0x9c, 0xb6, 0xc0, 0xe6, 0x2d, 0x24, 0xe7, 0x2d, 0x24, 0x93, 0x6b, 0xfd, 0x31, 0xc7, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xed, 0x0d, 0x98, 0x7f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// DB migrations
	MigrateUp(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// Cookie secure management
	RotateCookieKeys(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// Ping
	Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// Map creation
	CreateTileset(ctx context.Context, in *dto.CreateTilesetReq, opts ...grpc.CallOption) (*dto.CreateTilesetResp, error)
	CreateWorld(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.String, error)
	// Entity
	CreateTemplate(ctx context.Context, in *dto1.CreateTemplateReq, opts ...grpc.CallOption) (*entity.Template, error)
	CreateAnimation(ctx context.Context, in *dto1.CreateAnimationReq, opts ...grpc.CallOption) (*pbtypes.Empty, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) MigrateUp(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Admin/MigrateUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RotateCookieKeys(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Admin/RotateCookieKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Admin/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateTileset(ctx context.Context, in *dto.CreateTilesetReq, opts ...grpc.CallOption) (*dto.CreateTilesetResp, error) {
	out := new(dto.CreateTilesetResp)
	err := c.cc.Invoke(ctx, "/grpc.Admin/CreateTileset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateWorld(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.String, error) {
	out := new(pbtypes.String)
	err := c.cc.Invoke(ctx, "/grpc.Admin/CreateWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateTemplate(ctx context.Context, in *dto1.CreateTemplateReq, opts ...grpc.CallOption) (*entity.Template, error) {
	out := new(entity.Template)
	err := c.cc.Invoke(ctx, "/grpc.Admin/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAnimation(ctx context.Context, in *dto1.CreateAnimationReq, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Admin/CreateAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// DB migrations
	MigrateUp(context.Context, *pbtypes.String) (*pbtypes.Empty, error)
	// Cookie secure management
	RotateCookieKeys(context.Context, *pbtypes.Empty) (*pbtypes.Empty, error)
	// Ping
	Ping(context.Context, *pbtypes.Empty) (*pbtypes.Empty, error)
	// Map creation
	CreateTileset(context.Context, *dto.CreateTilesetReq) (*dto.CreateTilesetResp, error)
	CreateWorld(context.Context, *pbtypes.Empty) (*pbtypes.String, error)
	// Entity
	CreateTemplate(context.Context, *dto1.CreateTemplateReq) (*entity.Template, error)
	CreateAnimation(context.Context, *dto1.CreateAnimationReq) (*pbtypes.Empty, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) MigrateUp(ctx context.Context, req *pbtypes.String) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateUp not implemented")
}
func (*UnimplementedAdminServer) RotateCookieKeys(ctx context.Context, req *pbtypes.Empty) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateCookieKeys not implemented")
}
func (*UnimplementedAdminServer) Ping(ctx context.Context, req *pbtypes.Empty) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAdminServer) CreateTileset(ctx context.Context, req *dto.CreateTilesetReq) (*dto.CreateTilesetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTileset not implemented")
}
func (*UnimplementedAdminServer) CreateWorld(ctx context.Context, req *pbtypes.Empty) (*pbtypes.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (*UnimplementedAdminServer) CreateTemplate(ctx context.Context, req *dto1.CreateTemplateReq) (*entity.Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedAdminServer) CreateAnimation(ctx context.Context, req *dto1.CreateAnimationReq) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimation not implemented")
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_MigrateUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MigrateUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/MigrateUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MigrateUp(ctx, req.(*pbtypes.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RotateCookieKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RotateCookieKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/RotateCookieKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RotateCookieKeys(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Ping(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateTileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.CreateTilesetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateTileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/CreateTileset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateTileset(ctx, req.(*dto.CreateTilesetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/CreateWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateWorld(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateTemplate(ctx, req.(*dto1.CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto1.CreateAnimationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Admin/CreateAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAnimation(ctx, req.(*dto1.CreateAnimationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MigrateUp",
			Handler:    _Admin_MigrateUp_Handler,
		},
		{
			MethodName: "RotateCookieKeys",
			Handler:    _Admin_RotateCookieKeys_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Admin_Ping_Handler,
		},
		{
			MethodName: "CreateTileset",
			Handler:    _Admin_CreateTileset_Handler,
		},
		{
			MethodName: "CreateWorld",
			Handler:    _Admin_CreateWorld_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Admin_CreateTemplate_Handler,
		},
		{
			MethodName: "CreateAnimation",
			Handler:    _Admin_CreateAnimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/trax/cmd/admin/grpc/admin.proto",
}
