// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/trax/cmd/auth/grpc/auth.proto

package grpc

import (
	context "context"
	fmt "fmt"
	dto "github.com/elojah/trax/internal/user/dto"
	_ "github.com/elojah/trax/pkg/gogoproto"
	pbtypes "github.com/elojah/trax/pkg/pbtypes"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/elojah/trax/cmd/auth/grpc/auth.proto", fileDescriptor_caddd9128ba9588f)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/trax/cmd/auth/grpc/auth.proto", fileDescriptor_caddd9128ba9588f)
}

var fileDescriptor_caddd9128ba9588f = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x6d, 0xa9, 0xea, 0x10, 0x5d, 0xb5, 0x52, 0xc6, 0x0c, 0x67, 0xbc, 0x62, 0xb2, 0x11,
	0x7d, 0x02, 0x90, 0x10, 0x8c, 0xa8, 0xed, 0x0b, 0xa4, 0xa9, 0x71, 0x4c, 0x5b, 0xdb, 0x38, 0x27,
	0x82, 0x6e, 0x3c, 0x02, 0x8f, 0xc1, 0x23, 0x30, 0x76, 0xec, 0xd8, 0xb1, 0x23, 0x71, 0x16, 0x26,
	0xd4, 0x91, 0x11, 0xd5, 0xad, 0x8a, 0x54, 0xa9, 0x28, 0xdb, 0x6f, 0x9f, 0xff, 0xb3, 0x3f, 0x9d,
	0x88, 0x4b, 0x85, 0x79, 0x39, 0x62, 0x99, 0x99, 0x71, 0x31, 0x35, 0x0f, 0x69, 0xce, 0xd1, 0xa5,
	0xcf, 0x3c, 0x9b, 0x8d, 0x79, 0x5a, 0x62, 0xce, 0xa5, 0xb3, 0x59, 0x48, 0xcc, 0x3a, 0x83, 0x26,
	0x6e, 0x6d, 0x2f, 0x92, 0x53, 0x98, 0x9d, 0x48, 0x2e, 0x8d, 0x34, 0xa1, 0x1b, 0xd2, 0x0e, 0x4b,
	0xd8, 0x1f, 0x80, 0x1d, 0xe1, 0xdc, 0x8a, 0x82, 0x8b, 0x99, 0xc5, 0xf9, 0xbe, 0xcf, 0x1b, 0xf4,
	0x0b, 0x74, 0x4a, 0xcb, 0x3d, 0xd0, 0x3b, 0x01, 0x28, 0x8d, 0xc2, 0xe9, 0x74, 0xca, 0xcb, 0x42,
	0x38, 0x3e, 0x46, 0x13, 0xc2, 0x0e, 0xba, 0xf8, 0xa2, 0x51, 0xeb, 0xb2, 0xc4, 0x3c, 0x3e, 0x8b,
	0xda, 0x03, 0x25, 0x75, 0x69, 0xe3, 0x0e, 0x1b, 0xa3, 0x61, 0xbb, 0x43, 0x5f, 0x3c, 0x26, 0x1d,
	0xb6, 0xff, 0x8e, 0x5d, 0x6f, 0xf5, 0xe2, 0xf3, 0xe8, 0xdf, 0x76, 0xa8, 0xf4, 0x8d, 0x31, 0x72,
	0x2a, 0xe2, 0xee, 0x61, 0x3e, 0x08, 0x3a, 0x49, 0xf7, 0xf0, 0x80, 0xd2, 0x7d, 0x51, 0xd8, 0x5f,
	0x62, 0xf8, 0xa4, 0x30, 0xcb, 0x9b, 0x11, 0x7d, 0x71, 0xef, 0x44, 0x91, 0x0f, 0xcd, 0x44, 0xe8,
	0x06, 0xc4, 0xff, 0xa8, 0x75, 0xa7, 0xb4, 0x8c, 0x8f, 0x6c, 0x8f, 0xed, 0xaf, 0x6e, 0x97, 0x15,
	0x90, 0x55, 0x05, 0x64, 0x5d, 0x01, 0xd9, 0x54, 0x40, 0xbf, 0x2b, 0xa0, 0x2f, 0x1e, 0xe8, 0x9b,
	0x07, 0xfa, 0xee, 0x81, 0x2e, 0x3c, 0xd0, 0xa5, 0x07, 0xba, 0xf2, 0x40, 0x3f, 0x3c, 0xd0, 0x4f,
	0x0f, 0x64, 0xe3, 0x81, 0xbe, 0xd6, 0x40, 0x16, 0x35, 0xd0, 0x55, 0x0d, 0x64, 0x5d, 0x03, 0x19,
	0xb5, 0xc3, 0x06, 0x7b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x0e, 0xd2, 0x5a, 0x41, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	// Signup
	Signup(ctx context.Context, in *dto.SignupReq, opts ...grpc.CallOption) (*pbtypes.Empty, error)
	// Signin Google
	SigninGoogle(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error)
	// Signin Twitch
	SigninTwitch(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error)
	// Refresh token
	RefreshToken(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error)
	// Ping
	Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Signup(ctx context.Context, in *dto.SignupReq, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Auth/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SigninGoogle(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error) {
	out := new(dto.SigninResp)
	err := c.cc.Invoke(ctx, "/grpc.Auth/SigninGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SigninTwitch(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error) {
	out := new(dto.SigninResp)
	err := c.cc.Invoke(ctx, "/grpc.Auth/SigninTwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *pbtypes.String, opts ...grpc.CallOption) (*dto.SigninResp, error) {
	out := new(dto.SigninResp)
	err := c.cc.Invoke(ctx, "/grpc.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Ping(ctx context.Context, in *pbtypes.Empty, opts ...grpc.CallOption) (*pbtypes.Empty, error) {
	out := new(pbtypes.Empty)
	err := c.cc.Invoke(ctx, "/grpc.Auth/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	// Signup
	Signup(context.Context, *dto.SignupReq) (*pbtypes.Empty, error)
	// Signin Google
	SigninGoogle(context.Context, *pbtypes.String) (*dto.SigninResp, error)
	// Signin Twitch
	SigninTwitch(context.Context, *pbtypes.String) (*dto.SigninResp, error)
	// Refresh token
	RefreshToken(context.Context, *pbtypes.String) (*dto.SigninResp, error)
	// Ping
	Ping(context.Context, *pbtypes.Empty) (*pbtypes.Empty, error)
}

// UnimplementedAuthServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) Signup(ctx context.Context, req *dto.SignupReq) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (*UnimplementedAuthServer) SigninGoogle(ctx context.Context, req *pbtypes.String) (*dto.SigninResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninGoogle not implemented")
}
func (*UnimplementedAuthServer) SigninTwitch(ctx context.Context, req *pbtypes.String) (*dto.SigninResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninTwitch not implemented")
}
func (*UnimplementedAuthServer) RefreshToken(ctx context.Context, req *pbtypes.String) (*dto.SigninResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (*UnimplementedAuthServer) Ping(ctx context.Context, req *pbtypes.Empty) (*pbtypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.SignupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Auth/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Signup(ctx, req.(*dto.SignupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SigninGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SigninGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Auth/SigninGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SigninGoogle(ctx, req.(*pbtypes.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SigninTwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SigninTwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Auth/SigninTwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SigninTwitch(ctx, req.(*pbtypes.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*pbtypes.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtypes.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Auth/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Ping(ctx, req.(*pbtypes.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _Auth_Signup_Handler,
		},
		{
			MethodName: "SigninGoogle",
			Handler:    _Auth_SigninGoogle_Handler,
		},
		{
			MethodName: "SigninTwitch",
			Handler:    _Auth_SigninTwitch_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Auth_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/elojah/trax/cmd/auth/grpc/auth.proto",
}
