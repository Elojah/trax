// @generated by protobuf-ts 2.11.1 with parameter optimize_speed
// @generated from protobuf file "internal/user/invitation.proto" (package "user", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message user.Invitation
 */
export interface Invitation {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: string Email = 2
     */
    email: string;
    /**
     * @generated from protobuf field: int64 CreatedAt = 3
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 4
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf message user.InvitationRole
 */
export interface InvitationRole {
    /**
     * @generated from protobuf field: bytes InvitationID = 1
     */
    invitationID: Uint8Array;
    /**
     * @generated from protobuf field: bytes RoleID = 2
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: int64 CreatedAt = 3
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 4
     */
    updatedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Invitation$Type extends MessageType<Invitation> {
    constructor() {
        super("user.Invitation", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Email", kind: "scalar", jsonName: "Email", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Invitation>): Invitation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.email = "";
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Invitation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Invitation): Invitation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                case /* string Email */ 2:
                    message.email = reader.string();
                    break;
                case /* int64 CreatedAt */ 3:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt */ 4:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Invitation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* string Email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* int64 CreatedAt = 3; */
        if (message.createdAt !== 0n)
            writer.tag(3, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 4; */
        if (message.updatedAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Invitation
 */
export const Invitation = new Invitation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvitationRole$Type extends MessageType<InvitationRole> {
    constructor() {
        super("user.InvitationRole", [
            { no: 1, name: "InvitationID", kind: "scalar", jsonName: "InvitationID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 3, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InvitationRole>): InvitationRole {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.invitationID = new Uint8Array(0);
        message.roleID = new Uint8Array(0);
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<InvitationRole>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvitationRole): InvitationRole {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes InvitationID */ 1:
                    message.invitationID = reader.bytes();
                    break;
                case /* bytes RoleID */ 2:
                    message.roleID = reader.bytes();
                    break;
                case /* int64 CreatedAt */ 3:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt */ 4:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvitationRole, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes InvitationID = 1; */
        if (message.invitationID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.invitationID);
        /* bytes RoleID = 2; */
        if (message.roleID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.roleID);
        /* int64 CreatedAt = 3; */
        if (message.createdAt !== 0n)
            writer.tag(3, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 4; */
        if (message.updatedAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.InvitationRole
 */
export const InvitationRole = new InvitationRole$Type();
