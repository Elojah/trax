// @generated by protobuf-ts 2.9.3 with parameter optimize_speed
// @generated from protobuf file "github.com/elojah/trax/internal/user/entity.proto" (package "user", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { String$ } from "../../pkg/pbtypes/string";
/**
 * @generated from protobuf message user.Entity
 */
export interface Entity {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: string Name = 2 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: int64 CreatedAt = 3 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 4 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf message user.EntityProfile
 */
export interface EntityProfile {
    /**
     * @generated from protobuf field: bytes EntityID = 1 [json_name = "EntityID"];
     */
    entityID: Uint8Array;
    /**
     * @generated from protobuf field: pbtypes.String AvatarURL = 2 [json_name = "AvatarURL"];
     */
    avatarURL?: String$;
    /**
     * @generated from protobuf field: pbtypes.String Description = 3 [json_name = "Description"];
     */
    description?: String$;
    /**
     * @generated from protobuf field: int64 CreatedAt = 4 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 5 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Entity$Type extends MessageType<Entity> {
    constructor() {
        super("user.Entity", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Entity>): Entity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.name = "";
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Entity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Entity): Entity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.bytes();
                    break;
                case /* string Name = 2 [json_name = "Name"];*/ 2:
                    message.name = reader.string();
                    break;
                case /* int64 CreatedAt = 3 [json_name = "CreatedAt"];*/ 3:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 4 [json_name = "UpdatedAt"];*/ 4:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Entity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1 [json_name = "ID"]; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* string Name = 2 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 CreatedAt = 3 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(3, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 4 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Entity
 */
export const Entity = new Entity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityProfile$Type extends MessageType<EntityProfile> {
    constructor() {
        super("user.EntityProfile", [
            { no: 1, name: "EntityID", kind: "scalar", jsonName: "EntityID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "AvatarURL", kind: "message", jsonName: "AvatarURL", T: () => String$ },
            { no: 3, name: "Description", kind: "message", jsonName: "Description", T: () => String$ },
            { no: 4, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EntityProfile>): EntityProfile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityID = new Uint8Array(0);
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<EntityProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityProfile): EntityProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes EntityID = 1 [json_name = "EntityID"];*/ 1:
                    message.entityID = reader.bytes();
                    break;
                case /* pbtypes.String AvatarURL = 2 [json_name = "AvatarURL"];*/ 2:
                    message.avatarURL = String$.internalBinaryRead(reader, reader.uint32(), options, message.avatarURL);
                    break;
                case /* pbtypes.String Description = 3 [json_name = "Description"];*/ 3:
                    message.description = String$.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* int64 CreatedAt = 4 [json_name = "CreatedAt"];*/ 4:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"];*/ 5:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes EntityID = 1 [json_name = "EntityID"]; */
        if (message.entityID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.entityID);
        /* pbtypes.String AvatarURL = 2 [json_name = "AvatarURL"]; */
        if (message.avatarURL)
            String$.internalBinaryWrite(message.avatarURL, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* pbtypes.String Description = 3 [json_name = "Description"]; */
        if (message.description)
            String$.internalBinaryWrite(message.description, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 CreatedAt = 4 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.EntityProfile
 */
export const EntityProfile = new EntityProfile$Type();
