/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: internal/user/entity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../pkg/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace user {
    export class Entity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Name?: string;
            AvatarURL?: string;
            Description?: string;
            CreatedAt?: number;
            UpdatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("AvatarURL" in data && data.AvatarURL != undefined) {
                    this.AvatarURL = data.AvatarURL;
                }
                if ("Description" in data && data.Description != undefined) {
                    this.Description = data.Description;
                }
                if ("CreatedAt" in data && data.CreatedAt != undefined) {
                    this.CreatedAt = data.CreatedAt;
                }
                if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                    this.UpdatedAt = data.UpdatedAt;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get AvatarURL() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set AvatarURL(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set Description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get CreatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set CreatedAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get UpdatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set UpdatedAt(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Name?: string;
            AvatarURL?: string;
            Description?: string;
            CreatedAt?: number;
            UpdatedAt?: number;
        }): Entity {
            const message = new Entity({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.AvatarURL != null) {
                message.AvatarURL = data.AvatarURL;
            }
            if (data.Description != null) {
                message.Description = data.Description;
            }
            if (data.CreatedAt != null) {
                message.CreatedAt = data.CreatedAt;
            }
            if (data.UpdatedAt != null) {
                message.UpdatedAt = data.UpdatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Name?: string;
                AvatarURL?: string;
                Description?: string;
                CreatedAt?: number;
                UpdatedAt?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.AvatarURL != null) {
                data.AvatarURL = this.AvatarURL;
            }
            if (this.Description != null) {
                data.Description = this.Description;
            }
            if (this.CreatedAt != null) {
                data.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != null) {
                data.UpdatedAt = this.UpdatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.AvatarURL.length)
                writer.writeString(3, this.AvatarURL);
            if (this.Description.length)
                writer.writeString(4, this.Description);
            if (this.CreatedAt != 0)
                writer.writeInt64(5, this.CreatedAt);
            if (this.UpdatedAt != 0)
                writer.writeInt64(6, this.UpdatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        message.AvatarURL = reader.readString();
                        break;
                    case 4:
                        message.Description = reader.readString();
                        break;
                    case 5:
                        message.CreatedAt = reader.readInt64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Entity {
            return Entity.deserialize(bytes);
        }
    }
}
