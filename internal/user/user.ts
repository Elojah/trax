// @generated by protobuf-ts 2.9.3 with parameter optimize_speed
// @generated from protobuf file "github.com/elojah/trax/internal/user/user.proto" (package "user", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message user.U
 */
export interface U {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: string Email = 2 [json_name = "Email"];
     */
    email: string;
    /**
     * @generated from protobuf field: bytes PasswordHash = 3 [json_name = "PasswordHash"];
     */
    passwordHash: Uint8Array;
    /**
     * @generated from protobuf field: bytes PasswordSalt = 4 [json_name = "PasswordSalt"];
     */
    passwordSalt: Uint8Array;
    /**
     * @generated from protobuf field: string GoogleID = 5 [json_name = "GoogleID"];
     */
    googleID: string;
    /**
     * @generated from protobuf field: string TwitchID = 6 [json_name = "TwitchID"];
     */
    twitchID: string;
    /**
     * @generated from protobuf field: int64 CreatedAt = 7 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 8 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf message user.Profile
 */
export interface Profile {
    /**
     * @generated from protobuf field: bytes UserID = 1 [json_name = "UserID"];
     */
    userID: Uint8Array;
    /**
     * @generated from protobuf field: string FirstName = 2 [json_name = "FirstName"];
     */
    firstName: string;
    /**
     * @generated from protobuf field: string LastName = 3 [json_name = "LastName"];
     */
    lastName: string;
    /**
     * @generated from protobuf field: int64 CreatedAt = 4 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 5 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class U$Type extends MessageType<U> {
    constructor() {
        super("user.U", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Email", kind: "scalar", jsonName: "Email", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "PasswordHash", kind: "scalar", jsonName: "PasswordHash", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "PasswordSalt", kind: "scalar", jsonName: "PasswordSalt", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "GoogleID", kind: "scalar", jsonName: "GoogleID", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "TwitchID", kind: "scalar", jsonName: "TwitchID", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<U>): U {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.email = "";
        message.passwordHash = new Uint8Array(0);
        message.passwordSalt = new Uint8Array(0);
        message.googleID = "";
        message.twitchID = "";
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<U>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: U): U {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.bytes();
                    break;
                case /* string Email = 2 [json_name = "Email"];*/ 2:
                    message.email = reader.string();
                    break;
                case /* bytes PasswordHash = 3 [json_name = "PasswordHash"];*/ 3:
                    message.passwordHash = reader.bytes();
                    break;
                case /* bytes PasswordSalt = 4 [json_name = "PasswordSalt"];*/ 4:
                    message.passwordSalt = reader.bytes();
                    break;
                case /* string GoogleID = 5 [json_name = "GoogleID"];*/ 5:
                    message.googleID = reader.string();
                    break;
                case /* string TwitchID = 6 [json_name = "TwitchID"];*/ 6:
                    message.twitchID = reader.string();
                    break;
                case /* int64 CreatedAt = 7 [json_name = "CreatedAt"];*/ 7:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 8 [json_name = "UpdatedAt"];*/ 8:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: U, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1 [json_name = "ID"]; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* string Email = 2 [json_name = "Email"]; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* bytes PasswordHash = 3 [json_name = "PasswordHash"]; */
        if (message.passwordHash.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.passwordHash);
        /* bytes PasswordSalt = 4 [json_name = "PasswordSalt"]; */
        if (message.passwordSalt.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.passwordSalt);
        /* string GoogleID = 5 [json_name = "GoogleID"]; */
        if (message.googleID !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.googleID);
        /* string TwitchID = 6 [json_name = "TwitchID"]; */
        if (message.twitchID !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.twitchID);
        /* int64 CreatedAt = 7 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(7, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 8 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(8, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.U
 */
export const U = new U$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Profile$Type extends MessageType<Profile> {
    constructor() {
        super("user.Profile", [
            { no: 1, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "FirstName", kind: "scalar", jsonName: "FirstName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "LastName", kind: "scalar", jsonName: "LastName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Profile>): Profile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userID = new Uint8Array(0);
        message.firstName = "";
        message.lastName = "";
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Profile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Profile): Profile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes UserID = 1 [json_name = "UserID"];*/ 1:
                    message.userID = reader.bytes();
                    break;
                case /* string FirstName = 2 [json_name = "FirstName"];*/ 2:
                    message.firstName = reader.string();
                    break;
                case /* string LastName = 3 [json_name = "LastName"];*/ 3:
                    message.lastName = reader.string();
                    break;
                case /* int64 CreatedAt = 4 [json_name = "CreatedAt"];*/ 4:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"];*/ 5:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Profile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes UserID = 1 [json_name = "UserID"]; */
        if (message.userID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.userID);
        /* string FirstName = 2 [json_name = "FirstName"]; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string LastName = 3 [json_name = "LastName"]; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* int64 CreatedAt = 4 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Profile
 */
export const Profile = new Profile$Type();
