// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/user/dto/invitation.proto

package dto

import (
	fmt "fmt"
	_ "github.com/elojah/trax/pkg/gogoproto"
	github_com_elojah_trax_pkg_ulid "github.com/elojah/trax/pkg/ulid"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InviteUserReq struct {
	Email   string                               `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	GroupID github_com_elojah_trax_pkg_ulid.ID   `protobuf:"bytes,2,opt,name=GroupID,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"GroupID"`
	RoleIDs []github_com_elojah_trax_pkg_ulid.ID `protobuf:"bytes,3,rep,name=RoleIDs,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"RoleIDs"`
}

func (m *InviteUserReq) Reset()      { *m = InviteUserReq{} }
func (*InviteUserReq) ProtoMessage() {}
func (*InviteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a299ab25b4df04f, []int{0}
}
func (m *InviteUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteUserReq.Merge(m, src)
}
func (m *InviteUserReq) XXX_Size() int {
	return m.Size()
}
func (m *InviteUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_InviteUserReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InviteUserReq)(nil), "dto.InviteUserReq")
	golang_proto.RegisterType((*InviteUserReq)(nil), "dto.InviteUserReq")
}

func init() {
	proto.RegisterFile("internal/user/dto/invitation.proto", fileDescriptor_6a299ab25b4df04f)
}
func init() {
	golang_proto.RegisterFile("internal/user/dto/invitation.proto", fileDescriptor_6a299ab25b4df04f)
}

var fileDescriptor_6a299ab25b4df04f = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x2f, 0x4f, 0xc3, 0x40,
	0x18, 0xc6, 0xef, 0x65, 0x01, 0x42, 0x03, 0x66, 0x41, 0x34, 0x88, 0x77, 0x4d, 0x55, 0x83, 0xe8,
	0x09, 0xbe, 0xc1, 0x52, 0x42, 0x6a, 0x9b, 0x60, 0x70, 0x1d, 0xbd, 0x74, 0x07, 0x5d, 0xdf, 0x72,
	0xbd, 0x12, 0x24, 0x1f, 0x81, 0x8f, 0x81, 0xc5, 0x21, 0x27, 0x2b, 0x2b, 0x17, 0xc4, 0x42, 0xaf,
	0x06, 0x39, 0x89, 0x24, 0xed, 0x40, 0x11, 0x04, 0xee, 0xfd, 0x93, 0xdf, 0xf3, 0x24, 0x3f, 0xcb,
	0x95, 0xb9, 0x16, 0x2a, 0x8f, 0x33, 0x5e, 0x95, 0x42, 0xf1, 0x44, 0x13, 0x97, 0xf9, 0xbd, 0xd4,
	0xb1, 0x96, 0x94, 0xfb, 0x85, 0x22, 0x4d, 0xe3, 0x51, 0xa2, 0xe9, 0xc4, 0x2e, 0x6e, 0x53, 0x9e,
	0x52, 0x4a, 0xc3, 0x6d, 0x98, 0xb6, 0x6f, 0xf7, 0x05, 0xac, 0xa3, 0xb0, 0x67, 0xc4, 0x65, 0x29,
	0x54, 0x24, 0xee, 0xc6, 0xc7, 0xd6, 0xee, 0xf9, 0x22, 0x96, 0x99, 0x0d, 0x0e, 0x78, 0x07, 0xd1,
	0x76, 0x19, 0x07, 0xd6, 0xfe, 0x85, 0xa2, 0xaa, 0x08, 0x03, 0x7b, 0xc7, 0x01, 0xef, 0x70, 0x7a,
	0x5a, 0xaf, 0x27, 0xec, 0x6d, 0x3d, 0x71, 0x53, 0xa9, 0xe7, 0xd5, 0xcc, 0xbf, 0xa6, 0x05, 0x17,
	0x19, 0xdd, 0xc4, 0x73, 0xae, 0x55, 0xfc, 0xc0, 0xfb, 0xc6, 0x2a, 0x93, 0x89, 0x1f, 0x06, 0xd1,
	0x0f, 0xda, 0xa7, 0x44, 0x94, 0x89, 0x30, 0x28, 0xed, 0x91, 0x33, 0xfa, 0x6f, 0xca, 0x37, 0x3a,
	0x55, 0x75, 0x8b, 0xac, 0x69, 0x91, 0xad, 0x5a, 0x64, 0x9b, 0x16, 0xe1, 0xb3, 0x45, 0x78, 0x34,
	0x08, 0xcf, 0x06, 0xe1, 0xd5, 0x20, 0x2c, 0x0d, 0x42, 0x6d, 0x10, 0x1a, 0x83, 0xf0, 0x6e, 0x10,
	0x3e, 0x0c, 0xb2, 0x8d, 0x41, 0x78, 0xea, 0x90, 0x2d, 0x3b, 0x84, 0xa6, 0x43, 0xb6, 0xea, 0x90,
	0x5d, 0x79, 0x7f, 0xd4, 0xfe, 0xf2, 0x3a, 0xdb, 0x1b, 0x74, 0x9d, 0x7d, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x6f, 0x03, 0xe6, 0x73, 0x01, 0x00, 0x00,
}

func (this *InviteUserReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InviteUserReq)
	if !ok {
		that2, ok := that.(InviteUserReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.GroupID.Equal(that1.GroupID) {
		return false
	}
	if len(this.RoleIDs) != len(that1.RoleIDs) {
		return false
	}
	for i := range this.RoleIDs {
		if !this.RoleIDs[i].Equal(that1.RoleIDs[i]) {
			return false
		}
	}
	return true
}
func (this *InviteUserReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.InviteUserReq{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "GroupID: "+fmt.Sprintf("%#v", this.GroupID)+",\n")
	s = append(s, "RoleIDs: "+fmt.Sprintf("%#v", this.RoleIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInvitation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InviteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIDs) > 0 {
		for iNdEx := len(m.RoleIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.RoleIDs[iNdEx].Size()
				i -= size
				if _, err := m.RoleIDs[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInvitation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.GroupID.Size()
		i -= size
		if _, err := m.GroupID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvitation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintInvitation(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInvitation(dAtA []byte, offset int, v uint64) int {
	offset -= sovInvitation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedInviteUserReq(r randyInvitation, easy bool) *InviteUserReq {
	this := &InviteUserReq{}
	this.Email = string(randStringInvitation(r))
	v1 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
	this.GroupID = *v1
	v2 := r.Intn(10)
	this.RoleIDs = make([]github_com_elojah_trax_pkg_ulid.ID, v2)
	for i := 0; i < v2; i++ {
		v3 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
		this.RoleIDs[i] = *v3
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyInvitation interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneInvitation(r randyInvitation) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringInvitation(r randyInvitation) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneInvitation(r)
	}
	return string(tmps)
}
func randUnrecognizedInvitation(r randyInvitation, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldInvitation(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldInvitation(dAtA []byte, r randyInvitation, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateInvitation(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateInvitation(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *InviteUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovInvitation(uint64(l))
	}
	l = m.GroupID.Size()
	n += 1 + l + sovInvitation(uint64(l))
	if len(m.RoleIDs) > 0 {
		for _, e := range m.RoleIDs {
			l = e.Size()
			n += 1 + l + sovInvitation(uint64(l))
		}
	}
	return n
}

func sovInvitation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInvitation(x uint64) (n int) {
	return sovInvitation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InviteUserReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteUserReq{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`RoleIDs:` + fmt.Sprintf("%v", this.RoleIDs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInvitation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InviteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvitation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvitation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_elojah_trax_pkg_ulid.ID
			m.RoleIDs = append(m.RoleIDs, v)
			if err := m.RoleIDs[len(m.RoleIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvitation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvitation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvitation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvitation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvitation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvitation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvitation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInvitation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInvitation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInvitation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvitation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInvitation = fmt.Errorf("proto: unexpected end of group")
)
