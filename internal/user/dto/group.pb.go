// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/user/dto/group.proto

package dto

import (
	fmt "fmt"
	user "github.com/elojah/trax/internal/user"
	_ "github.com/elojah/trax/pkg/gogoproto"
	paginate "github.com/elojah/trax/pkg/paginate"
	pbtypes "github.com/elojah/trax/pkg/pbtypes"
	github_com_elojah_trax_pkg_ulid "github.com/elojah/trax/pkg/ulid"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateGroupReq struct {
	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	AvatarURL   string `protobuf:"bytes,3,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
}

func (m *CreateGroupReq) Reset()      { *m = CreateGroupReq{} }
func (*CreateGroupReq) ProtoMessage() {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{0}
}
func (m *CreateGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupReq.Merge(m, src)
}
func (m *CreateGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupReq proto.InternalMessageInfo

type UpdateGroupReq struct {
	ID          github_com_elojah_trax_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"ID"`
	Name        *pbtypes.String                    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description *pbtypes.String                    `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	AvatarURL   *pbtypes.String                    `protobuf:"bytes,4,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
}

func (m *UpdateGroupReq) Reset()      { *m = UpdateGroupReq{} }
func (*UpdateGroupReq) ProtoMessage() {}
func (*UpdateGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{1}
}
func (m *UpdateGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupReq.Merge(m, src)
}
func (m *UpdateGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupReq proto.InternalMessageInfo

type FetchGroupReq struct {
	ID github_com_elojah_trax_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"ID"`
}

func (m *FetchGroupReq) Reset()      { *m = FetchGroupReq{} }
func (*FetchGroupReq) ProtoMessage() {}
func (*FetchGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{2}
}
func (m *FetchGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupReq.Merge(m, src)
}
func (m *FetchGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupReq proto.InternalMessageInfo

type ListGroupReq struct {
	Paginate *paginate.Paginate                   `protobuf:"bytes,1,opt,name=Paginate,proto3" json:"Paginate,omitempty"`
	Search   string                               `protobuf:"bytes,2,opt,name=Search,proto3" json:"Search,omitempty"`
	Own      bool                                 `protobuf:"varint,3,opt,name=Own,proto3" json:"Own,omitempty"`
	IDs      []github_com_elojah_trax_pkg_ulid.ID `protobuf:"bytes,4,rep,name=IDs,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"IDs"`
}

func (m *ListGroupReq) Reset()      { *m = ListGroupReq{} }
func (*ListGroupReq) ProtoMessage() {}
func (*ListGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{3}
}
func (m *ListGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupReq.Merge(m, src)
}
func (m *ListGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupReq proto.InternalMessageInfo

type ListGroupResp struct {
	Groups []user.Group `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups"`
	Total  uint64       `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (m *ListGroupResp) Reset()      { *m = ListGroupResp{} }
func (*ListGroupResp) ProtoMessage() {}
func (*ListGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{4}
}
func (m *ListGroupResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupResp.Merge(m, src)
}
func (m *ListGroupResp) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupResp proto.InternalMessageInfo

type DeleteGroupReq struct {
	ID github_com_elojah_trax_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/trax/pkg/ulid.ID" json:"ID"`
}

func (m *DeleteGroupReq) Reset()      { *m = DeleteGroupReq{} }
func (*DeleteGroupReq) ProtoMessage() {}
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e31ea7c0b7bb0a1e, []int{5}
}
func (m *DeleteGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGroupReq.Merge(m, src)
}
func (m *DeleteGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGroupReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateGroupReq)(nil), "dto.CreateGroupReq")
	golang_proto.RegisterType((*CreateGroupReq)(nil), "dto.CreateGroupReq")
	proto.RegisterType((*UpdateGroupReq)(nil), "dto.UpdateGroupReq")
	golang_proto.RegisterType((*UpdateGroupReq)(nil), "dto.UpdateGroupReq")
	proto.RegisterType((*FetchGroupReq)(nil), "dto.FetchGroupReq")
	golang_proto.RegisterType((*FetchGroupReq)(nil), "dto.FetchGroupReq")
	proto.RegisterType((*ListGroupReq)(nil), "dto.ListGroupReq")
	golang_proto.RegisterType((*ListGroupReq)(nil), "dto.ListGroupReq")
	proto.RegisterType((*ListGroupResp)(nil), "dto.ListGroupResp")
	golang_proto.RegisterType((*ListGroupResp)(nil), "dto.ListGroupResp")
	proto.RegisterType((*DeleteGroupReq)(nil), "dto.DeleteGroupReq")
	golang_proto.RegisterType((*DeleteGroupReq)(nil), "dto.DeleteGroupReq")
}

func init() { proto.RegisterFile("internal/user/dto/group.proto", fileDescriptor_e31ea7c0b7bb0a1e) }
func init() {
	golang_proto.RegisterFile("internal/user/dto/group.proto", fileDescriptor_e31ea7c0b7bb0a1e)
}

var fileDescriptor_e31ea7c0b7bb0a1e = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3f, 0x8f, 0xd3, 0x4e,
	0x10, 0xf5, 0xc6, 0xfe, 0x45, 0x77, 0xeb, 0xbb, 0xfc, 0xd0, 0x0a, 0x21, 0xf3, 0x6f, 0x12, 0x99,
	0x26, 0x20, 0x61, 0x8b, 0x40, 0x85, 0x68, 0x08, 0x16, 0x28, 0x22, 0x82, 0x93, 0x8f, 0x6b, 0xe8,
	0x36, 0xf1, 0xca, 0x31, 0xf8, 0xbc, 0x66, 0xbd, 0xe1, 0x4f, 0xc7, 0x47, 0xe0, 0x63, 0x50, 0xf0,
	0x01, 0x28, 0xaf, 0x4c, 0x19, 0x89, 0xe6, 0x44, 0x11, 0x61, 0xa7, 0xa1, 0xbc, 0x92, 0x12, 0x79,
	0x63, 0x82, 0x23, 0x8e, 0x02, 0xe9, 0xba, 0x99, 0x79, 0xb3, 0xfb, 0xde, 0x9b, 0xd9, 0xc5, 0x57,
	0xa3, 0x44, 0x32, 0x91, 0xd0, 0xd8, 0x9d, 0x66, 0x4c, 0xb8, 0x81, 0xe4, 0x6e, 0x28, 0xf8, 0x34,
	0x75, 0x52, 0xc1, 0x25, 0x27, 0x7a, 0x20, 0xf9, 0x25, 0x2b, 0x7d, 0x19, 0xba, 0x21, 0x0f, 0xb9,
	0xaa, 0xa9, 0x68, 0x05, 0xaf, 0x90, 0x74, 0x24, 0xdf, 0xa5, 0x2c, 0x73, 0x33, 0x29, 0xa2, 0x24,
	0xac, 0x90, 0xcb, 0x0a, 0xa1, 0x61, 0x94, 0x50, 0xc9, 0xd6, 0x41, 0x05, 0x5e, 0xdc, 0x24, 0xad,
	0x11, 0xda, 0x01, 0x6e, 0x3d, 0x10, 0x8c, 0x4a, 0xf6, 0xa8, 0x2c, 0xfa, 0xec, 0x15, 0x21, 0xd8,
	0x78, 0x42, 0x0f, 0x99, 0x85, 0x3a, 0xa8, 0xbb, 0xed, 0xab, 0x98, 0x74, 0xb0, 0xe9, 0xb1, 0x6c,
	0x2c, 0xa2, 0x54, 0x46, 0x3c, 0xb1, 0x1a, 0x0a, 0xaa, 0x97, 0xc8, 0x15, 0xbc, 0x7d, 0xff, 0x35,
	0x95, 0x54, 0x1c, 0xf8, 0x43, 0x4b, 0x57, 0xf8, 0xef, 0x82, 0xfd, 0x05, 0xe1, 0xd6, 0x41, 0x1a,
	0xd4, 0x69, 0xee, 0xe2, 0xc6, 0xc0, 0x53, 0x24, 0x3b, 0xfd, 0x1b, 0xb3, 0x45, 0x5b, 0xfb, 0xba,
	0x68, 0xdb, 0x61, 0x24, 0x27, 0xd3, 0x91, 0x33, 0xe6, 0x87, 0x2e, 0x8b, 0xf9, 0x0b, 0x3a, 0x71,
	0xa5, 0xa0, 0x6f, 0xdd, 0xd2, 0xdb, 0x34, 0x8e, 0x02, 0x67, 0xe0, 0xf9, 0x8d, 0x81, 0x47, 0xae,
	0x55, 0x12, 0x4b, 0x1d, 0x66, 0xef, 0x7f, 0xa7, 0x9a, 0x88, 0xb3, 0xaf, 0x26, 0x52, 0x69, 0xbe,
	0xb5, 0xa9, 0x59, 0x3f, 0xbd, 0x77, 0xc3, 0xc4, 0xcd, 0xba, 0x09, 0xe3, 0xf4, 0x03, 0x35, 0x57,
	0x8f, 0xf1, 0xee, 0x43, 0x26, 0xc7, 0x93, 0xb3, 0xf0, 0x64, 0x7f, 0x42, 0x78, 0x67, 0x18, 0x65,
	0x72, 0x7d, 0xd9, 0x1d, 0xbc, 0xb5, 0x57, 0xad, 0x51, 0x5d, 0x69, 0xf6, 0x88, 0xb3, 0xde, 0xeb,
	0x2f, 0xa4, 0x6f, 0xcc, 0x16, 0x6d, 0xe4, 0xaf, 0x3b, 0xc9, 0x05, 0xdc, 0xdc, 0x67, 0x54, 0x8c,
	0x27, 0xd5, 0x92, 0xaa, 0x8c, 0x9c, 0xc3, 0xfa, 0xd3, 0x37, 0xab, 0x29, 0x6c, 0xf9, 0x65, 0x48,
	0xee, 0x61, 0x7d, 0xe0, 0x65, 0x96, 0xd1, 0xd1, 0xff, 0x51, 0x6d, 0x79, 0xcc, 0xde, 0xc3, 0xbb,
	0x35, 0xb5, 0x59, 0x4a, 0xae, 0xe3, 0xa6, 0x4a, 0x32, 0x0b, 0x75, 0xf4, 0xae, 0xd9, 0x33, 0x9d,
	0xf2, 0xad, 0x39, 0xaa, 0xa6, 0x54, 0x6a, 0x7e, 0xd5, 0x40, 0xce, 0xe3, 0xff, 0x9e, 0x71, 0x49,
	0x63, 0x25, 0xd1, 0xf0, 0x57, 0x89, 0x3d, 0xc4, 0x2d, 0x8f, 0xc5, 0xec, 0x6c, 0x9e, 0x48, 0x5f,
	0xcc, 0x72, 0xd0, 0xe6, 0x39, 0x68, 0xc7, 0x39, 0x68, 0x27, 0x39, 0xa0, 0x1f, 0x39, 0xa0, 0xf7,
	0x05, 0xa0, 0x8f, 0x05, 0xa0, 0xcf, 0x05, 0xa0, 0xa3, 0x02, 0xd0, 0xac, 0x00, 0x34, 0x2f, 0x00,
	0x7d, 0x2b, 0x00, 0x7d, 0x2f, 0x40, 0x3b, 0x29, 0x00, 0x7d, 0x58, 0x82, 0x76, 0xb4, 0x04, 0x34,
	0x5f, 0x82, 0x76, 0xbc, 0x04, 0xed, 0x79, 0xf7, 0x2f, 0x8c, 0x7f, 0x7c, 0xe4, 0x51, 0x53, 0x7d,
	0xa9, 0xdb, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x10, 0x65, 0x15, 0xe4, 0x03, 0x00, 0x00,
}

func (this *CreateGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGroupReq)
	if !ok {
		that2, ok := that.(CreateGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.AvatarURL != that1.AvatarURL {
		return false
	}
	return true
}
func (this *UpdateGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGroupReq)
	if !ok {
		that2, ok := that.(UpdateGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.AvatarURL.Equal(that1.AvatarURL) {
		return false
	}
	return true
}
func (this *FetchGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchGroupReq)
	if !ok {
		that2, ok := that.(FetchGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *ListGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGroupReq)
	if !ok {
		that2, ok := that.(ListGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Paginate.Equal(that1.Paginate) {
		return false
	}
	if this.Search != that1.Search {
		return false
	}
	if this.Own != that1.Own {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if !this.IDs[i].Equal(that1.IDs[i]) {
			return false
		}
	}
	return true
}
func (this *ListGroupResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGroupResp)
	if !ok {
		that2, ok := that.(ListGroupResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(&that1.Groups[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *DeleteGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteGroupReq)
	if !ok {
		that2, ok := that.(DeleteGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *CreateGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.CreateGroupReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "AvatarURL: "+fmt.Sprintf("%#v", this.AvatarURL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dto.UpdateGroupReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.AvatarURL != nil {
		s = append(s, "AvatarURL: "+fmt.Sprintf("%#v", this.AvatarURL)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.FetchGroupReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dto.ListGroupReq{")
	if this.Paginate != nil {
		s = append(s, "Paginate: "+fmt.Sprintf("%#v", this.Paginate)+",\n")
	}
	s = append(s, "Search: "+fmt.Sprintf("%#v", this.Search)+",\n")
	s = append(s, "Own: "+fmt.Sprintf("%#v", this.Own)+",\n")
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListGroupResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dto.ListGroupResp{")
	if this.Groups != nil {
		vs := make([]user.Group, len(this.Groups))
		for i := range vs {
			vs[i] = this.Groups[i]
		}
		s = append(s, "Groups: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.DeleteGroupReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGroup(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvatarURL) > 0 {
		i -= len(m.AvatarURL)
		copy(dAtA[i:], m.AvatarURL)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.AvatarURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarURL != nil {
		{
			size, err := m.AvatarURL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FetchGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for iNdEx := len(m.IDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.IDs[iNdEx].Size()
				i -= size
				if _, err := m.IDs[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Own {
		i--
		if m.Own {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x12
	}
	if m.Paginate != nil {
		{
			size, err := m.Paginate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListGroupResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGroupResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCreateGroupReq(r randyGroup, easy bool) *CreateGroupReq {
	this := &CreateGroupReq{}
	this.Name = string(randStringGroup(r))
	this.Description = string(randStringGroup(r))
	this.AvatarURL = string(randStringGroup(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGroupReq(r randyGroup, easy bool) *UpdateGroupReq {
	this := &UpdateGroupReq{}
	v1 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	if r.Intn(5) != 0 {
		this.Name = pbtypes.NewPopulatedString(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Description = pbtypes.NewPopulatedString(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AvatarURL = pbtypes.NewPopulatedString(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFetchGroupReq(r randyGroup, easy bool) *FetchGroupReq {
	this := &FetchGroupReq{}
	v2 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
	this.ID = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGroupReq(r randyGroup, easy bool) *ListGroupReq {
	this := &ListGroupReq{}
	if r.Intn(5) != 0 {
		this.Paginate = paginate.NewPopulatedPaginate(r, easy)
	}
	this.Search = string(randStringGroup(r))
	this.Own = bool(bool(r.Intn(2) == 0))
	v3 := r.Intn(10)
	this.IDs = make([]github_com_elojah_trax_pkg_ulid.ID, v3)
	for i := 0; i < v3; i++ {
		v4 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
		this.IDs[i] = *v4
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGroupResp(r randyGroup, easy bool) *ListGroupResp {
	this := &ListGroupResp{}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Groups = make([]user.Group, v5)
		for i := 0; i < v5; i++ {
			v6 := user.NewPopulatedGroup(r, easy)
			this.Groups[i] = *v6
		}
	}
	this.Total = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteGroupReq(r randyGroup, easy bool) *DeleteGroupReq {
	this := &DeleteGroupReq{}
	v7 := github_com_elojah_trax_pkg_ulid.NewPopulatedID(r)
	this.ID = *v7
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGroup interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGroup(r randyGroup) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGroup(r randyGroup) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneGroup(r)
	}
	return string(tmps)
}
func randUnrecognizedGroup(r randyGroup, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGroup(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGroup(dAtA []byte, r randyGroup, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGroup(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CreateGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.AvatarURL)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *UpdateGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovGroup(uint64(l))
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.AvatarURL != nil {
		l = m.AvatarURL.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *FetchGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovGroup(uint64(l))
	return n
}

func (m *ListGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paginate != nil {
		l = m.Paginate.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Own {
		n += 2
	}
	if len(m.IDs) > 0 {
		for _, e := range m.IDs {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *ListGroupResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovGroup(uint64(m.Total))
	}
	return n
}

func (m *DeleteGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovGroup(uint64(l))
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGroupReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`AvatarURL:` + fmt.Sprintf("%v", this.AvatarURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "String", "pbtypes.String", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "String", "pbtypes.String", 1) + `,`,
		`AvatarURL:` + strings.Replace(fmt.Sprintf("%v", this.AvatarURL), "String", "pbtypes.String", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FetchGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchGroupReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGroupReq{`,
		`Paginate:` + strings.Replace(fmt.Sprintf("%v", this.Paginate), "Paginate", "paginate.Paginate", 1) + `,`,
		`Search:` + fmt.Sprintf("%v", this.Search) + `,`,
		`Own:` + fmt.Sprintf("%v", this.Own) + `,`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGroupResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ListGroupResp{`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteGroupReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGroup(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &pbtypes.String{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &pbtypes.String{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarURL == nil {
				m.AvatarURL = &pbtypes.String{}
			}
			if err := m.AvatarURL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginate == nil {
				m.Paginate = &paginate.Paginate{}
			}
			if err := m.Paginate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Own", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Own = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_elojah_trax_pkg_ulid.ID
			m.IDs = append(m.IDs, v)
			if err := m.IDs[len(m.IDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, user.Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
