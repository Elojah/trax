/**
<<<<<<< HEAD
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: internal/user/dto/role.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../pkg/gogoproto/gogo";
import * as dependency_2 from "./../../../pkg/paginate/paginate";
import * as dependency_3 from "./../../../pkg/pbtypes/string";
import * as dependency_4 from "./../role";
import * as dependency_5 from "./../user";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class RolePermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Role?: dependency_4.user.Role;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Role" in data && data.Role != undefined) {
                    this.Role = data.Role;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
=======
 * @generated from protobuf message dto.RolePermission
 */
export interface RolePermission {
    /**
     * @generated from protobuf field: user.Role Role = 1 [json_name = "Role"];
     */
    role?: Role;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 2 [json_name = "Permissions"];
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.CreateRoleReq
 */
export interface CreateRoleReq {
    /**
     * @generated from protobuf field: bytes EntityID = 1 [json_name = "EntityID"];
     */
    entityID: Uint8Array;
    /**
     * @generated from protobuf field: string Name = 2 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 3 [json_name = "Permissions"];
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.UpdateRoleReq
 */
export interface UpdateRoleReq {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: pbtypes.String Name = 2 [json_name = "Name"];
     */
    name?: String$;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 3 [json_name = "Permissions"];
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.ListRoleReq
 */
export interface ListRoleReq {
    /**
     * @generated from protobuf field: paginate.Paginate Paginate = 1 [json_name = "Paginate"];
     */
    paginate?: Paginate;
    /**
     * @generated from protobuf field: string Search = 2 [json_name = "Search"];
     */
    search: string;
    /**
     * @generated from protobuf field: bool Own = 3 [json_name = "Own"];
     */
    own: boolean;
    /**
     * @generated from protobuf field: bool OwnEntity = 4 [json_name = "OwnEntity"];
     */
    ownEntity: boolean;
    /**
     * @generated from protobuf field: repeated bytes IDs = 5 [json_name = "IDs"];
     */
    iDs: Uint8Array[];
    /**
     * @generated from protobuf field: repeated bytes EntityIDs = 6 [json_name = "EntityIDs"];
     */
    entityIDs: Uint8Array[];
    /**
     * @generated from protobuf field: bytes UserID = 7 [json_name = "UserID"];
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.ListRoleResp
 */
export interface ListRoleResp {
    /**
     * @generated from protobuf field: repeated dto.RolePermission Roles = 1 [json_name = "Roles"];
     */
    roles: RolePermission[];
    /**
     * @generated from protobuf field: uint64 Total = 2 [json_name = "Total"];
     */
    total: bigint;
}
/**
 * @generated from protobuf message dto.CreateRoleUserReq
 */
export interface CreateRoleUserReq {
    /**
     * @generated from protobuf field: bytes RoleID = 1 [json_name = "RoleID"];
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: bytes UserID = 2 [json_name = "UserID"];
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.RoleUserResp
 */
export interface RoleUserResp {
    /**
     * @generated from protobuf field: user.U User = 1 [json_name = "User"];
     */
    user?: U;
    /**
     * @generated from protobuf field: dto.RolePermission Role = 2 [json_name = "Role"];
     */
    role?: RolePermission;
}
/**
 * @generated from protobuf message dto.DeleteRoleUserReq
 */
export interface DeleteRoleUserReq {
    /**
     * @generated from protobuf field: bytes RoleID = 1 [json_name = "RoleID"];
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: bytes UserID = 2 [json_name = "UserID"];
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.DeleteRoleReq
 */
export interface DeleteRoleReq {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class RolePermission$Type extends MessageType<RolePermission> {
    constructor() {
        super("dto.RolePermission", [
            { no: 1, name: "Role", kind: "message", jsonName: "Role", T: () => Role, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Permissions", kind: "message", jsonName: "Permissions", repeat: 1 /*RepeatType.PACKED*/, T: () => Permission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<RolePermission>): RolePermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<RolePermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermission): RolePermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user.Role Role = 1 [json_name = "Role"];*/ 1:
                    message.role = Role.internalBinaryRead(reader, reader.uint32(), options, message.role);
                    break;
                case /* repeated user.Permission Permissions = 2 [json_name = "Permissions"];*/ 2:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
>>>>>>> 4994f2b (wip)
            }
        }
        get Role() {
            return pb_1.Message.getWrapperField(this, dependency_4.user.Role, 1) as dependency_4.user.Role;
        }
        set Role(value: dependency_4.user.Role) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Role() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 2) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            Role?: ReturnType<typeof dependency_4.user.Role.prototype.toObject>;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): RolePermission {
            const message = new RolePermission({});
            if (data.Role != null) {
                message.Role = dependency_4.user.Role.fromObject(data.Role);
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Role?: ReturnType<typeof dependency_4.user.Role.prototype.toObject>;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.Role != null) {
                data.Role = this.Role.toObject();
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Role)
                writer.writeMessage(1, this.Role, () => this.Role.serialize(writer));
            if (this.Permissions.length)
                writer.writeRepeatedMessage(2, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RolePermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RolePermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Role, () => message.Role = dependency_4.user.Role.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RolePermission {
            return RolePermission.deserialize(bytes);
        }
    }
    export class CreateRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityID?: Uint8Array;
            Name?: string;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
            }
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 3) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            EntityID?: Uint8Array;
            Name?: string;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): CreateRoleReq {
            const message = new CreateRoleReq({});
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                EntityID?: Uint8Array;
                Name?: string;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityID.length)
                writer.writeBytes(1, this.EntityID);
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.Permissions.length)
                writer.writeRepeatedMessage(3, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityID = reader.readBytes();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleReq {
            return CreateRoleReq.deserialize(bytes);
        }
    }
    export class UpdateRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Name?: dependency_3.pbtypes.String;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getWrapperField(this, dependency_3.pbtypes.String, 2) as dependency_3.pbtypes.String;
        }
        set Name(value: dependency_3.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 3) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Name?: ReturnType<typeof dependency_3.pbtypes.String.prototype.toObject>;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): UpdateRoleReq {
            const message = new UpdateRoleReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Name != null) {
                message.Name = dependency_3.pbtypes.String.fromObject(data.Name);
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Name?: ReturnType<typeof dependency_3.pbtypes.String.prototype.toObject>;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Name != null) {
                data.Name = this.Name.toObject();
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.has_Name)
                writer.writeMessage(2, this.Name, () => this.Name.serialize(writer));
            if (this.Permissions.length)
                writer.writeRepeatedMessage(3, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.Name, () => message.Name = dependency_3.pbtypes.String.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoleReq {
            return UpdateRoleReq.deserialize(bytes);
        }
    }
<<<<<<< HEAD
    export class ListRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Paginate?: dependency_2.paginate.Paginate;
            Search?: string;
            Own?: boolean;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Paginate" in data && data.Paginate != undefined) {
                    this.Paginate = data.Paginate;
                }
                if ("Search" in data && data.Search != undefined) {
                    this.Search = data.Search;
                }
                if ("Own" in data && data.Own != undefined) {
                    this.Own = data.Own;
                }
                if ("OwnEntity" in data && data.OwnEntity != undefined) {
                    this.OwnEntity = data.OwnEntity;
                }
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("EntityIDs" in data && data.EntityIDs != undefined) {
                    this.EntityIDs = data.EntityIDs;
                }
            }
        }
        get Paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.paginate.Paginate, 1) as dependency_2.paginate.Paginate;
        }
        set Paginate(value: dependency_2.paginate.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Search() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Search(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Own() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set Own(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get OwnEntity() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set OwnEntity(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get EntityIDs() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as Uint8Array[];
        }
        set EntityIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            Paginate?: ReturnType<typeof dependency_2.paginate.Paginate.prototype.toObject>;
            Search?: string;
            Own?: boolean;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
        }): ListRoleReq {
            const message = new ListRoleReq({});
            if (data.Paginate != null) {
                message.Paginate = dependency_2.paginate.Paginate.fromObject(data.Paginate);
            }
            if (data.Search != null) {
                message.Search = data.Search;
            }
            if (data.Own != null) {
                message.Own = data.Own;
            }
            if (data.OwnEntity != null) {
                message.OwnEntity = data.OwnEntity;
            }
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.EntityIDs != null) {
                message.EntityIDs = data.EntityIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                Paginate?: ReturnType<typeof dependency_2.paginate.Paginate.prototype.toObject>;
                Search?: string;
                Own?: boolean;
                OwnEntity?: boolean;
                IDs?: Uint8Array[];
                EntityIDs?: Uint8Array[];
            } = {};
            if (this.Paginate != null) {
                data.Paginate = this.Paginate.toObject();
            }
            if (this.Search != null) {
                data.Search = this.Search;
            }
            if (this.Own != null) {
                data.Own = this.Own;
            }
            if (this.OwnEntity != null) {
                data.OwnEntity = this.OwnEntity;
            }
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.EntityIDs != null) {
                data.EntityIDs = this.EntityIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Paginate)
                writer.writeMessage(1, this.Paginate, () => this.Paginate.serialize(writer));
            if (this.Search.length)
                writer.writeString(2, this.Search);
            if (this.Own != false)
                writer.writeBool(3, this.Own);
            if (this.OwnEntity != false)
                writer.writeBool(4, this.OwnEntity);
            if (this.IDs.length)
                writer.writeRepeatedBytes(5, this.IDs);
            if (this.EntityIDs.length)
                writer.writeRepeatedBytes(6, this.EntityIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Paginate, () => message.Paginate = dependency_2.paginate.Paginate.deserialize(reader));
                        break;
                    case 2:
                        message.Search = reader.readString();
                        break;
                    case 3:
                        message.Own = reader.readBool();
                        break;
                    case 4:
                        message.OwnEntity = reader.readBool();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoleReq {
            return ListRoleReq.deserialize(bytes);
        }
    }
    export class RoleUsers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Role?: RolePermission;
            Users?: dependency_5.user.U[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Role" in data && data.Role != undefined) {
                    this.Role = data.Role;
                }
                if ("Users" in data && data.Users != undefined) {
                    this.Users = data.Users;
                }
            }
        }
        get Role() {
            return pb_1.Message.getWrapperField(this, RolePermission, 1) as RolePermission;
        }
        set Role(value: RolePermission) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Role() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.user.U, 2) as dependency_5.user.U[];
        }
        set Users(value: dependency_5.user.U[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            Role?: ReturnType<typeof RolePermission.prototype.toObject>;
            Users?: ReturnType<typeof dependency_5.user.U.prototype.toObject>[];
        }): RoleUsers {
            const message = new RoleUsers({});
            if (data.Role != null) {
                message.Role = RolePermission.fromObject(data.Role);
            }
            if (data.Users != null) {
                message.Users = data.Users.map(item => dependency_5.user.U.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Role?: ReturnType<typeof RolePermission.prototype.toObject>;
                Users?: ReturnType<typeof dependency_5.user.U.prototype.toObject>[];
            } = {};
            if (this.Role != null) {
                data.Role = this.Role.toObject();
            }
            if (this.Users != null) {
                data.Users = this.Users.map((item: dependency_5.user.U) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Role)
                writer.writeMessage(1, this.Role, () => this.Role.serialize(writer));
            if (this.Users.length)
                writer.writeRepeatedMessage(2, this.Users, (item: dependency_5.user.U) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoleUsers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoleUsers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
=======
    internalBinaryWrite(message: UpdateRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1 [json_name = "ID"]; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* pbtypes.String Name = 2 [json_name = "Name"]; */
        if (message.name)
            String$.internalBinaryWrite(message.name, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated user.Permission Permissions = 3 [json_name = "Permissions"]; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.UpdateRoleReq
 */
export const UpdateRoleReq = new UpdateRoleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoleReq$Type extends MessageType<ListRoleReq> {
    constructor() {
        super("dto.ListRoleReq", [
            { no: 1, name: "Paginate", kind: "message", jsonName: "Paginate", T: () => Paginate, options: { "gogoproto.nullable": true } },
            { no: 2, name: "Search", kind: "scalar", jsonName: "Search", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Own", kind: "scalar", jsonName: "Own", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "OwnEntity", kind: "scalar", jsonName: "OwnEntity", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "IDs", kind: "scalar", jsonName: "IDs", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 6, name: "EntityIDs", kind: "scalar", jsonName: "EntityIDs", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 7, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<ListRoleReq>): ListRoleReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.search = "";
        message.own = false;
        message.ownEntity = false;
        message.iDs = [];
        message.entityIDs = [];
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ListRoleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoleReq): ListRoleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* paginate.Paginate Paginate = 1 [json_name = "Paginate"];*/ 1:
                    message.paginate = Paginate.internalBinaryRead(reader, reader.uint32(), options, message.paginate);
                    break;
                case /* string Search = 2 [json_name = "Search"];*/ 2:
                    message.search = reader.string();
                    break;
                case /* bool Own = 3 [json_name = "Own"];*/ 3:
                    message.own = reader.bool();
                    break;
                case /* bool OwnEntity = 4 [json_name = "OwnEntity"];*/ 4:
                    message.ownEntity = reader.bool();
                    break;
                case /* repeated bytes IDs = 5 [json_name = "IDs"];*/ 5:
                    message.iDs.push(reader.bytes());
                    break;
                case /* repeated bytes EntityIDs = 6 [json_name = "EntityIDs"];*/ 6:
                    message.entityIDs.push(reader.bytes());
                    break;
                case /* bytes UserID = 7 [json_name = "UserID"];*/ 7:
                    message.userID = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* paginate.Paginate Paginate = 1 [json_name = "Paginate"]; */
        if (message.paginate)
            Paginate.internalBinaryWrite(message.paginate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string Search = 2 [json_name = "Search"]; */
        if (message.search !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.search);
        /* bool Own = 3 [json_name = "Own"]; */
        if (message.own !== false)
            writer.tag(3, WireType.Varint).bool(message.own);
        /* bool OwnEntity = 4 [json_name = "OwnEntity"]; */
        if (message.ownEntity !== false)
            writer.tag(4, WireType.Varint).bool(message.ownEntity);
        /* repeated bytes IDs = 5 [json_name = "IDs"]; */
        for (let i = 0; i < message.iDs.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.iDs[i]);
        /* repeated bytes EntityIDs = 6 [json_name = "EntityIDs"]; */
        for (let i = 0; i < message.entityIDs.length; i++)
            writer.tag(6, WireType.LengthDelimited).bytes(message.entityIDs[i]);
        /* bytes UserID = 7 [json_name = "UserID"]; */
        if (message.userID.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListRoleReq
 */
export const ListRoleReq = new ListRoleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoleResp$Type extends MessageType<ListRoleResp> {
    constructor() {
        super("dto.ListRoleResp", [
            { no: 1, name: "Roles", kind: "message", jsonName: "Roles", repeat: 1 /*RepeatType.PACKED*/, T: () => RolePermission, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Total", kind: "scalar", jsonName: "Total", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListRoleResp>): ListRoleResp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roles = [];
        message.total = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListRoleResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoleResp): ListRoleResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dto.RolePermission Roles = 1 [json_name = "Roles"];*/ 1:
                    message.roles.push(RolePermission.internalBinaryRead(reader, reader.uint32(), options));
>>>>>>> 4994f2b (wip)
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Role, () => message.Role = RolePermission.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Users, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.user.U.deserialize(reader), dependency_5.user.U));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoleUsers {
            return RoleUsers.deserialize(bytes);
        }
    }
    export class ListRoleResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Roles?: RoleUsers[];
            Total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Roles" in data && data.Roles != undefined) {
                    this.Roles = data.Roles;
                }
                if ("Total" in data && data.Total != undefined) {
                    this.Total = data.Total;
                }
            }
        }
<<<<<<< HEAD
        get Roles() {
            return pb_1.Message.getRepeatedWrapperField(this, RoleUsers, 1) as RoleUsers[];
        }
        set Roles(value: RoleUsers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Roles?: ReturnType<typeof RoleUsers.prototype.toObject>[];
            Total?: number;
        }): ListRoleResp {
            const message = new ListRoleResp({});
            if (data.Roles != null) {
                message.Roles = data.Roles.map(item => RoleUsers.fromObject(item));
            }
            if (data.Total != null) {
                message.Total = data.Total;
            }
            return message;
        }
        toObject() {
            const data: {
                Roles?: ReturnType<typeof RoleUsers.prototype.toObject>[];
                Total?: number;
            } = {};
            if (this.Roles != null) {
                data.Roles = this.Roles.map((item: RoleUsers) => item.toObject());
            }
            if (this.Total != null) {
                data.Total = this.Total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Roles.length)
                writer.writeRepeatedMessage(1, this.Roles, (item: RoleUsers) => item.serialize(writer));
            if (this.Total != 0)
                writer.writeUint64(2, this.Total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoleResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoleResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
=======
        return message;
    }
    internalBinaryWrite(message: ListRoleResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated dto.RolePermission Roles = 1 [json_name = "Roles"]; */
        for (let i = 0; i < message.roles.length; i++)
            RolePermission.internalBinaryWrite(message.roles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 Total = 2 [json_name = "Total"]; */
        if (message.total !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListRoleResp
 */
export const ListRoleResp = new ListRoleResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleUserReq$Type extends MessageType<CreateRoleUserReq> {
    constructor() {
        super("dto.CreateRoleUserReq", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<CreateRoleUserReq>): CreateRoleUserReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CreateRoleUserReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleUserReq): CreateRoleUserReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID = 1 [json_name = "RoleID"];*/ 1:
                    message.roleID = reader.bytes();
>>>>>>> 4994f2b (wip)
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Roles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RoleUsers.deserialize(reader), RoleUsers));
                        break;
                    case 2:
                        message.Total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoleResp {
            return ListRoleResp.deserialize(bytes);
        }
    }
    export class CreateRoleUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
            }
        }
<<<<<<< HEAD
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }): CreateRoleUserReq {
            const message = new CreateRoleUserReq({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                UserID?: Uint8Array;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
=======
        return message;
    }
    internalBinaryWrite(message: CreateRoleUserReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes RoleID = 1 [json_name = "RoleID"]; */
        if (message.roleID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.roleID);
        /* bytes UserID = 2 [json_name = "UserID"]; */
        if (message.userID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.CreateRoleUserReq
 */
export const CreateRoleUserReq = new CreateRoleUserReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleUserResp$Type extends MessageType<RoleUserResp> {
    constructor() {
        super("dto.RoleUserResp", [
            { no: 1, name: "User", kind: "message", jsonName: "User", T: () => U, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Role", kind: "message", jsonName: "Role", T: () => RolePermission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<RoleUserResp>): RoleUserResp {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleUserResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleUserResp): RoleUserResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user.U User = 1 [json_name = "User"];*/ 1:
                    message.user = U.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* dto.RolePermission Role = 2 [json_name = "Role"];*/ 2:
                    message.role = RolePermission.internalBinaryRead(reader, reader.uint32(), options, message.role);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleUserResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user.U User = 1 [json_name = "User"]; */
        if (message.user)
            U.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* dto.RolePermission Role = 2 [json_name = "Role"]; */
        if (message.role)
            RolePermission.internalBinaryWrite(message.role, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.RoleUserResp
 */
export const RoleUserResp = new RoleUserResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleUserReq$Type extends MessageType<DeleteRoleUserReq> {
    constructor() {
        super("dto.DeleteRoleUserReq", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleUserReq>): DeleteRoleUserReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleUserReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleUserReq): DeleteRoleUserReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID = 1 [json_name = "RoleID"];*/ 1:
                    message.roleID = reader.bytes();
>>>>>>> 4994f2b (wip)
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleUserReq {
            return CreateRoleUserReq.deserialize(bytes);
        }
    }
    export class DeleteRoleUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
            }
        }
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }): DeleteRoleUserReq {
            const message = new DeleteRoleUserReq({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                UserID?: Uint8Array;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleUserReq {
            return DeleteRoleUserReq.deserialize(bytes);
        }
    }
    export class DeleteRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
        }): DeleteRoleReq {
            const message = new DeleteRoleReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleReq {
            return DeleteRoleReq.deserialize(bytes);
        }
    }
}
