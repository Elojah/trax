/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: internal/user/dto/role.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../pkg/gogoproto/gogo";
import * as dependency_2 from "./../../../pkg/paginate/paginate";
import * as dependency_3 from "./../../../pkg/pbtypes/string";
import * as dependency_4 from "./../role";
import * as dependency_5 from "./../user";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class RolePermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Role?: dependency_4.user.Role;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Role" in data && data.Role != undefined) {
                    this.Role = data.Role;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
            }
        }
        get Role() {
            return pb_1.Message.getWrapperField(this, dependency_4.user.Role, 1) as dependency_4.user.Role;
        }
        set Role(value: dependency_4.user.Role) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Role() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 2) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            Role?: ReturnType<typeof dependency_4.user.Role.prototype.toObject>;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): RolePermission {
            const message = new RolePermission({});
            if (data.Role != null) {
                message.Role = dependency_4.user.Role.fromObject(data.Role);
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Role?: ReturnType<typeof dependency_4.user.Role.prototype.toObject>;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.Role != null) {
                data.Role = this.Role.toObject();
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Role)
                writer.writeMessage(1, this.Role, () => this.Role.serialize(writer));
            if (this.Permissions.length)
                writer.writeRepeatedMessage(2, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RolePermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RolePermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Role, () => message.Role = dependency_4.user.Role.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RolePermission {
            return RolePermission.deserialize(bytes);
        }
    }
    export class CreateRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            EntityID?: Uint8Array;
            Name?: string;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
            }
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 3) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            EntityID?: Uint8Array;
            Name?: string;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): CreateRoleReq {
            const message = new CreateRoleReq({});
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                EntityID?: Uint8Array;
                Name?: string;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.EntityID.length)
                writer.writeBytes(1, this.EntityID);
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.Permissions.length)
                writer.writeRepeatedMessage(3, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.EntityID = reader.readBytes();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleReq {
            return CreateRoleReq.deserialize(bytes);
        }
    }
    export class UpdateRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Name?: dependency_3.pbtypes.String;
            Permissions?: dependency_4.user.Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Permissions" in data && data.Permissions != undefined) {
                    this.Permissions = data.Permissions;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getWrapperField(this, dependency_3.pbtypes.String, 2) as dependency_3.pbtypes.String;
        }
        set Name(value: dependency_3.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Permission, 3) as dependency_4.user.Permission[];
        }
        set Permissions(value: dependency_4.user.Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Name?: ReturnType<typeof dependency_3.pbtypes.String.prototype.toObject>;
            Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
        }): UpdateRoleReq {
            const message = new UpdateRoleReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Name != null) {
                message.Name = dependency_3.pbtypes.String.fromObject(data.Name);
            }
            if (data.Permissions != null) {
                message.Permissions = data.Permissions.map(item => dependency_4.user.Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Name?: ReturnType<typeof dependency_3.pbtypes.String.prototype.toObject>;
                Permissions?: ReturnType<typeof dependency_4.user.Permission.prototype.toObject>[];
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Name != null) {
                data.Name = this.Name.toObject();
            }
            if (this.Permissions != null) {
                data.Permissions = this.Permissions.map((item: dependency_4.user.Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.has_Name)
                writer.writeMessage(2, this.Name, () => this.Name.serialize(writer));
            if (this.Permissions.length)
                writer.writeRepeatedMessage(3, this.Permissions, (item: dependency_4.user.Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.Name, () => message.Name = dependency_3.pbtypes.String.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.Permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_4.user.Permission.deserialize(reader), dependency_4.user.Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRoleReq {
            return UpdateRoleReq.deserialize(bytes);
        }
    }
    export class ListRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Paginate?: dependency_2.paginate.Paginate;
            Search?: string;
            Own?: boolean;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
            UserID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Paginate" in data && data.Paginate != undefined) {
                    this.Paginate = data.Paginate;
                }
                if ("Search" in data && data.Search != undefined) {
                    this.Search = data.Search;
                }
                if ("Own" in data && data.Own != undefined) {
                    this.Own = data.Own;
                }
                if ("OwnEntity" in data && data.OwnEntity != undefined) {
                    this.OwnEntity = data.OwnEntity;
                }
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("EntityIDs" in data && data.EntityIDs != undefined) {
                    this.EntityIDs = data.EntityIDs;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
            }
        }
        get Paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.paginate.Paginate, 1) as dependency_2.paginate.Paginate;
        }
        set Paginate(value: dependency_2.paginate.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Search() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Search(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Own() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set Own(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get OwnEntity() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set OwnEntity(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get EntityIDs() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as Uint8Array[];
        }
        set EntityIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            Paginate?: ReturnType<typeof dependency_2.paginate.Paginate.prototype.toObject>;
            Search?: string;
            Own?: boolean;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
            UserID?: Uint8Array;
        }): ListRoleReq {
            const message = new ListRoleReq({});
            if (data.Paginate != null) {
                message.Paginate = dependency_2.paginate.Paginate.fromObject(data.Paginate);
            }
            if (data.Search != null) {
                message.Search = data.Search;
            }
            if (data.Own != null) {
                message.Own = data.Own;
            }
            if (data.OwnEntity != null) {
                message.OwnEntity = data.OwnEntity;
            }
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.EntityIDs != null) {
                message.EntityIDs = data.EntityIDs;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            return message;
        }
        toObject() {
            const data: {
                Paginate?: ReturnType<typeof dependency_2.paginate.Paginate.prototype.toObject>;
                Search?: string;
                Own?: boolean;
                OwnEntity?: boolean;
                IDs?: Uint8Array[];
                EntityIDs?: Uint8Array[];
                UserID?: Uint8Array;
            } = {};
            if (this.Paginate != null) {
                data.Paginate = this.Paginate.toObject();
            }
            if (this.Search != null) {
                data.Search = this.Search;
            }
            if (this.Own != null) {
                data.Own = this.Own;
            }
            if (this.OwnEntity != null) {
                data.OwnEntity = this.OwnEntity;
            }
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.EntityIDs != null) {
                data.EntityIDs = this.EntityIDs;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Paginate)
                writer.writeMessage(1, this.Paginate, () => this.Paginate.serialize(writer));
            if (this.Search.length)
                writer.writeString(2, this.Search);
            if (this.Own != false)
                writer.writeBool(3, this.Own);
            if (this.OwnEntity != false)
                writer.writeBool(4, this.OwnEntity);
            if (this.IDs.length)
                writer.writeRepeatedBytes(5, this.IDs);
            if (this.EntityIDs.length)
                writer.writeRepeatedBytes(6, this.EntityIDs);
            if (this.UserID.length)
                writer.writeBytes(7, this.UserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Paginate, () => message.Paginate = dependency_2.paginate.Paginate.deserialize(reader));
                        break;
                    case 2:
                        message.Search = reader.readString();
                        break;
                    case 3:
                        message.Own = reader.readBool();
                        break;
                    case 4:
                        message.OwnEntity = reader.readBool();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readBytes());
                        break;
                    case 7:
                        message.UserID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoleReq {
            return ListRoleReq.deserialize(bytes);
        }
    }
    export class ListRoleResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Roles?: RolePermission[];
            Total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Roles" in data && data.Roles != undefined) {
                    this.Roles = data.Roles;
                }
                if ("Total" in data && data.Total != undefined) {
                    this.Total = data.Total;
                }
            }
        }
        get Roles() {
            return pb_1.Message.getRepeatedWrapperField(this, RolePermission, 1) as RolePermission[];
        }
        set Roles(value: RolePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Roles?: ReturnType<typeof RolePermission.prototype.toObject>[];
            Total?: number;
        }): ListRoleResp {
            const message = new ListRoleResp({});
            if (data.Roles != null) {
                message.Roles = data.Roles.map(item => RolePermission.fromObject(item));
            }
            if (data.Total != null) {
                message.Total = data.Total;
            }
            return message;
        }
        toObject() {
            const data: {
                Roles?: ReturnType<typeof RolePermission.prototype.toObject>[];
                Total?: number;
            } = {};
            if (this.Roles != null) {
                data.Roles = this.Roles.map((item: RolePermission) => item.toObject());
            }
            if (this.Total != null) {
                data.Total = this.Total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Roles.length)
                writer.writeRepeatedMessage(1, this.Roles, (item: RolePermission) => item.serialize(writer));
            if (this.Total != 0)
                writer.writeUint64(2, this.Total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRoleResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRoleResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Roles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RolePermission.deserialize(reader), RolePermission));
                        break;
                    case 2:
                        message.Total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRoleResp {
            return ListRoleResp.deserialize(bytes);
        }
    }
    export class CreateRoleUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
            }
        }
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }): CreateRoleUserReq {
            const message = new CreateRoleUserReq({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                UserID?: Uint8Array;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoleUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoleUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoleUserReq {
            return CreateRoleUserReq.deserialize(bytes);
        }
    }
    export class RoleUserResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            User?: dependency_5.user.U;
            Role?: RolePermission;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("User" in data && data.User != undefined) {
                    this.User = data.User;
                }
                if ("Role" in data && data.Role != undefined) {
                    this.Role = data.Role;
                }
            }
        }
        get User() {
            return pb_1.Message.getWrapperField(this, dependency_5.user.U, 1) as dependency_5.user.U;
        }
        set User(value: dependency_5.user.U) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_User() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Role() {
            return pb_1.Message.getWrapperField(this, RolePermission, 2) as RolePermission;
        }
        set Role(value: RolePermission) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Role() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            User?: ReturnType<typeof dependency_5.user.U.prototype.toObject>;
            Role?: ReturnType<typeof RolePermission.prototype.toObject>;
        }): RoleUserResp {
            const message = new RoleUserResp({});
            if (data.User != null) {
                message.User = dependency_5.user.U.fromObject(data.User);
            }
            if (data.Role != null) {
                message.Role = RolePermission.fromObject(data.Role);
            }
            return message;
        }
        toObject() {
            const data: {
                User?: ReturnType<typeof dependency_5.user.U.prototype.toObject>;
                Role?: ReturnType<typeof RolePermission.prototype.toObject>;
            } = {};
            if (this.User != null) {
                data.User = this.User.toObject();
            }
            if (this.Role != null) {
                data.Role = this.Role.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_User)
                writer.writeMessage(1, this.User, () => this.User.serialize(writer));
            if (this.has_Role)
                writer.writeMessage(2, this.Role, () => this.Role.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoleUserResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoleUserResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.User, () => message.User = dependency_5.user.U.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Role, () => message.Role = RolePermission.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoleUserResp {
            return RoleUserResp.deserialize(bytes);
        }
    }
    export class DeleteRoleUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
            }
        }
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
        }): DeleteRoleUserReq {
            const message = new DeleteRoleUserReq({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                UserID?: Uint8Array;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleUserReq {
            return DeleteRoleUserReq.deserialize(bytes);
        }
    }
    export class DeleteRoleReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
        }): DeleteRoleReq {
            const message = new DeleteRoleReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRoleReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRoleReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRoleReq {
            return DeleteRoleReq.deserialize(bytes);
        }
    }
}
