// @generated by protobuf-ts 2.11.1 with parameter optimize_speed
// @generated from protobuf file "internal/user/dto/role.proto" (package "dto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { U } from "../user";
import { Paginate } from "../../../pkg/paginate/paginate";
import { String$ } from "../../../pkg/pbtypes/string";
import { Permission } from "../role";
import { Role } from "../role";
/**
 * @generated from protobuf message dto.RolePermission
 */
export interface RolePermission {
    /**
     * @generated from protobuf field: user.Role Role = 1
     */
    role?: Role;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 2
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.CreateRoleReq
 */
export interface CreateRoleReq {
    /**
     * @generated from protobuf field: bytes GroupID = 1
     */
    groupID: Uint8Array;
    /**
     * @generated from protobuf field: string Name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 3
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.UpdateRoleReq
 */
export interface UpdateRoleReq {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: pbtypes.String Name = 2
     */
    name?: String$;
    /**
     * @generated from protobuf field: repeated user.Permission Permissions = 3
     */
    permissions: Permission[];
}
/**
 * @generated from protobuf message dto.ListRoleReq
 */
export interface ListRoleReq {
    /**
     * @generated from protobuf field: paginate.Paginate Paginate = 1
     */
    paginate?: Paginate;
    /**
     * @generated from protobuf field: string Search = 2
     */
    search: string;
    /**
     * @generated from protobuf field: bool Own = 3
     */
    own: boolean;
    /**
     * @generated from protobuf field: bool OwnGroup = 4
     */
    ownGroup: boolean;
    /**
     * @generated from protobuf field: repeated bytes IDs = 5
     */
    iDs: Uint8Array[];
    /**
     * @generated from protobuf field: repeated bytes GroupIDs = 6
     */
    groupIDs: Uint8Array[];
    /**
     * @generated from protobuf field: bytes UserID = 7
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.ListRoleResp
 */
export interface ListRoleResp {
    /**
     * @generated from protobuf field: repeated dto.RolePermission Roles = 1
     */
    roles: RolePermission[];
    /**
     * @generated from protobuf field: uint64 Total = 2
     */
    total: bigint;
}
/**
 * @generated from protobuf message dto.CreateRoleUserReq
 */
export interface CreateRoleUserReq {
    /**
     * @generated from protobuf field: bytes RoleID = 1
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: bytes UserID = 2
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.RoleUserResp
 */
export interface RoleUserResp {
    /**
     * @generated from protobuf field: user.U User = 1
     */
    user?: U;
    /**
     * @generated from protobuf field: dto.RolePermission Role = 2
     */
    role?: RolePermission;
}
/**
 * @generated from protobuf message dto.DeleteRoleUserReq
 */
export interface DeleteRoleUserReq {
    /**
     * @generated from protobuf field: bytes RoleID = 1
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: bytes UserID = 2
     */
    userID: Uint8Array;
}
/**
 * @generated from protobuf message dto.DeleteRoleReq
 */
export interface DeleteRoleReq {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class RolePermission$Type extends MessageType<RolePermission> {
    constructor() {
        super("dto.RolePermission", [
            { no: 1, name: "Role", kind: "message", jsonName: "Role", T: () => Role, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Permissions", kind: "message", jsonName: "Permissions", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<RolePermission>): RolePermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<RolePermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolePermission): RolePermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user.Role Role */ 1:
                    message.role = Role.internalBinaryRead(reader, reader.uint32(), options, message.role);
                    break;
                case /* repeated user.Permission Permissions */ 2:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RolePermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user.Role Role = 1; */
        if (message.role)
            Role.internalBinaryWrite(message.role, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated user.Permission Permissions = 2; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.RolePermission
 */
export const RolePermission = new RolePermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleReq$Type extends MessageType<CreateRoleReq> {
    constructor() {
        super("dto.CreateRoleReq", [
            { no: 1, name: "GroupID", kind: "scalar", jsonName: "GroupID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Permissions", kind: "message", jsonName: "Permissions", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<CreateRoleReq>): CreateRoleReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupID = new Uint8Array(0);
        message.name = "";
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<CreateRoleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleReq): CreateRoleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes GroupID */ 1:
                    message.groupID = reader.bytes();
                    break;
                case /* string Name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated user.Permission Permissions */ 3:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes GroupID = 1; */
        if (message.groupID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.groupID);
        /* string Name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated user.Permission Permissions = 3; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.CreateRoleReq
 */
export const CreateRoleReq = new CreateRoleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRoleReq$Type extends MessageType<UpdateRoleReq> {
    constructor() {
        super("dto.UpdateRoleReq", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Name", kind: "message", jsonName: "Name", T: () => String$ },
            { no: 3, name: "Permissions", kind: "message", jsonName: "Permissions", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<UpdateRoleReq>): UpdateRoleReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.permissions = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateRoleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRoleReq): UpdateRoleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                case /* pbtypes.String Name */ 2:
                    message.name = String$.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* repeated user.Permission Permissions */ 3:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* pbtypes.String Name = 2; */
        if (message.name)
            String$.internalBinaryWrite(message.name, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated user.Permission Permissions = 3; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.UpdateRoleReq
 */
export const UpdateRoleReq = new UpdateRoleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoleReq$Type extends MessageType<ListRoleReq> {
    constructor() {
        super("dto.ListRoleReq", [
            { no: 1, name: "Paginate", kind: "message", jsonName: "Paginate", T: () => Paginate, options: { "gogoproto.nullable": true } },
            { no: 2, name: "Search", kind: "scalar", jsonName: "Search", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Own", kind: "scalar", jsonName: "Own", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "OwnGroup", kind: "scalar", jsonName: "OwnGroup", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "IDs", kind: "scalar", jsonName: "IDs", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 6, name: "GroupIDs", kind: "scalar", jsonName: "GroupIDs", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 7, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<ListRoleReq>): ListRoleReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.search = "";
        message.own = false;
        message.ownGroup = false;
        message.iDs = [];
        message.groupIDs = [];
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ListRoleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoleReq): ListRoleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* paginate.Paginate Paginate */ 1:
                    message.paginate = Paginate.internalBinaryRead(reader, reader.uint32(), options, message.paginate);
                    break;
                case /* string Search */ 2:
                    message.search = reader.string();
                    break;
                case /* bool Own */ 3:
                    message.own = reader.bool();
                    break;
                case /* bool OwnGroup */ 4:
                    message.ownGroup = reader.bool();
                    break;
                case /* repeated bytes IDs */ 5:
                    message.iDs.push(reader.bytes());
                    break;
                case /* repeated bytes GroupIDs */ 6:
                    message.groupIDs.push(reader.bytes());
                    break;
                case /* bytes UserID */ 7:
                    message.userID = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* paginate.Paginate Paginate = 1; */
        if (message.paginate)
            Paginate.internalBinaryWrite(message.paginate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string Search = 2; */
        if (message.search !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.search);
        /* bool Own = 3; */
        if (message.own !== false)
            writer.tag(3, WireType.Varint).bool(message.own);
        /* bool OwnGroup = 4; */
        if (message.ownGroup !== false)
            writer.tag(4, WireType.Varint).bool(message.ownGroup);
        /* repeated bytes IDs = 5; */
        for (let i = 0; i < message.iDs.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.iDs[i]);
        /* repeated bytes GroupIDs = 6; */
        for (let i = 0; i < message.groupIDs.length; i++)
            writer.tag(6, WireType.LengthDelimited).bytes(message.groupIDs[i]);
        /* bytes UserID = 7; */
        if (message.userID.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListRoleReq
 */
export const ListRoleReq = new ListRoleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoleResp$Type extends MessageType<ListRoleResp> {
    constructor() {
        super("dto.ListRoleResp", [
            { no: 1, name: "Roles", kind: "message", jsonName: "Roles", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RolePermission, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Total", kind: "scalar", jsonName: "Total", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListRoleResp>): ListRoleResp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roles = [];
        message.total = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListRoleResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoleResp): ListRoleResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dto.RolePermission Roles */ 1:
                    message.roles.push(RolePermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 Total */ 2:
                    message.total = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoleResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated dto.RolePermission Roles = 1; */
        for (let i = 0; i < message.roles.length; i++)
            RolePermission.internalBinaryWrite(message.roles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 Total = 2; */
        if (message.total !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListRoleResp
 */
export const ListRoleResp = new ListRoleResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleUserReq$Type extends MessageType<CreateRoleUserReq> {
    constructor() {
        super("dto.CreateRoleUserReq", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<CreateRoleUserReq>): CreateRoleUserReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CreateRoleUserReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleUserReq): CreateRoleUserReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID */ 1:
                    message.roleID = reader.bytes();
                    break;
                case /* bytes UserID */ 2:
                    message.userID = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoleUserReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes RoleID = 1; */
        if (message.roleID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.roleID);
        /* bytes UserID = 2; */
        if (message.userID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.CreateRoleUserReq
 */
export const CreateRoleUserReq = new CreateRoleUserReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleUserResp$Type extends MessageType<RoleUserResp> {
    constructor() {
        super("dto.RoleUserResp", [
            { no: 1, name: "User", kind: "message", jsonName: "User", T: () => U, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Role", kind: "message", jsonName: "Role", T: () => RolePermission, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<RoleUserResp>): RoleUserResp {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RoleUserResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleUserResp): RoleUserResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user.U User */ 1:
                    message.user = U.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* dto.RolePermission Role */ 2:
                    message.role = RolePermission.internalBinaryRead(reader, reader.uint32(), options, message.role);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleUserResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user.U User = 1; */
        if (message.user)
            U.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* dto.RolePermission Role = 2; */
        if (message.role)
            RolePermission.internalBinaryWrite(message.role, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.RoleUserResp
 */
export const RoleUserResp = new RoleUserResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleUserReq$Type extends MessageType<DeleteRoleUserReq> {
    constructor() {
        super("dto.DeleteRoleUserReq", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleUserReq>): DeleteRoleUserReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.userID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleUserReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleUserReq): DeleteRoleUserReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID */ 1:
                    message.roleID = reader.bytes();
                    break;
                case /* bytes UserID */ 2:
                    message.userID = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRoleUserReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes RoleID = 1; */
        if (message.roleID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.roleID);
        /* bytes UserID = 2; */
        if (message.userID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.userID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.DeleteRoleUserReq
 */
export const DeleteRoleUserReq = new DeleteRoleUserReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleReq$Type extends MessageType<DeleteRoleReq> {
    constructor() {
        super("dto.DeleteRoleReq", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleReq>): DeleteRoleReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleReq): DeleteRoleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRoleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.DeleteRoleReq
 */
export const DeleteRoleReq = new DeleteRoleReq$Type();
