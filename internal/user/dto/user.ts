/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: internal/user/dto/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../pkg/gogoproto/gogo";
import * as dependency_2 from "./../../../pkg/pbtypes/string";
import * as dependency_3 from "./../../../pkg/paginate/paginate";
import * as dependency_4 from "./../user";
import * as dependency_5 from "./../role";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class SigninResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            AccessToken?: string;
            RefreshToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("AccessToken" in data && data.AccessToken != undefined) {
                    this.AccessToken = data.AccessToken;
                }
                if ("RefreshToken" in data && data.RefreshToken != undefined) {
                    this.RefreshToken = data.RefreshToken;
                }
            }
        }
        get AccessToken() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set AccessToken(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get RefreshToken() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set RefreshToken(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            AccessToken?: string;
            RefreshToken?: string;
        }): SigninResp {
            const message = new SigninResp({});
            if (data.AccessToken != null) {
                message.AccessToken = data.AccessToken;
            }
            if (data.RefreshToken != null) {
                message.RefreshToken = data.RefreshToken;
            }
            return message;
        }
        toObject() {
            const data: {
                AccessToken?: string;
                RefreshToken?: string;
            } = {};
            if (this.AccessToken != null) {
                data.AccessToken = this.AccessToken;
            }
            if (this.RefreshToken != null) {
                data.RefreshToken = this.RefreshToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.AccessToken.length)
                writer.writeString(1, this.AccessToken);
            if (this.RefreshToken.length)
                writer.writeString(2, this.RefreshToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigninResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigninResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.AccessToken = reader.readString();
                        break;
                    case 2:
                        message.RefreshToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigninResp {
            return SigninResp.deserialize(bytes);
        }
    }
    export class SignupReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Firstname?: string;
            Lastname?: string;
            Email?: string;
            Password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Firstname" in data && data.Firstname != undefined) {
                    this.Firstname = data.Firstname;
                }
                if ("Lastname" in data && data.Lastname != undefined) {
                    this.Lastname = data.Lastname;
                }
                if ("Email" in data && data.Email != undefined) {
                    this.Email = data.Email;
                }
                if ("Password" in data && data.Password != undefined) {
                    this.Password = data.Password;
                }
            }
        }
        get Firstname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Firstname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Lastname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Lastname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set Email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set Password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            Firstname?: string;
            Lastname?: string;
            Email?: string;
            Password?: string;
        }): SignupReq {
            const message = new SignupReq({});
            if (data.Firstname != null) {
                message.Firstname = data.Firstname;
            }
            if (data.Lastname != null) {
                message.Lastname = data.Lastname;
            }
            if (data.Email != null) {
                message.Email = data.Email;
            }
            if (data.Password != null) {
                message.Password = data.Password;
            }
            return message;
        }
        toObject() {
            const data: {
                Firstname?: string;
                Lastname?: string;
                Email?: string;
                Password?: string;
            } = {};
            if (this.Firstname != null) {
                data.Firstname = this.Firstname;
            }
            if (this.Lastname != null) {
                data.Lastname = this.Lastname;
            }
            if (this.Email != null) {
                data.Email = this.Email;
            }
            if (this.Password != null) {
                data.Password = this.Password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Firstname.length)
                writer.writeString(1, this.Firstname);
            if (this.Lastname.length)
                writer.writeString(2, this.Lastname);
            if (this.Email.length)
                writer.writeString(3, this.Email);
            if (this.Password.length)
                writer.writeString(4, this.Password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignupReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignupReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Firstname = reader.readString();
                        break;
                    case 2:
                        message.Lastname = reader.readString();
                        break;
                    case 3:
                        message.Email = reader.readString();
                        break;
                    case 4:
                        message.Password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignupReq {
            return SignupReq.deserialize(bytes);
        }
    }
    export class SigninReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Email?: string;
            Password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Email" in data && data.Email != undefined) {
                    this.Email = data.Email;
                }
                if ("Password" in data && data.Password != undefined) {
                    this.Password = data.Password;
                }
            }
        }
        get Email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Email?: string;
            Password?: string;
        }): SigninReq {
            const message = new SigninReq({});
            if (data.Email != null) {
                message.Email = data.Email;
            }
            if (data.Password != null) {
                message.Password = data.Password;
            }
            return message;
        }
        toObject() {
            const data: {
                Email?: string;
                Password?: string;
            } = {};
            if (this.Email != null) {
                data.Email = this.Email;
            }
            if (this.Password != null) {
                data.Password = this.Password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Email.length)
                writer.writeString(1, this.Email);
            if (this.Password.length)
                writer.writeString(2, this.Password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigninReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigninReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Email = reader.readString();
                        break;
                    case 2:
                        message.Password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigninReq {
            return SigninReq.deserialize(bytes);
        }
    }
    export class FetchUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Me?: boolean;
            ID?: Uint8Array;
            EntityID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Me" in data && data.Me != undefined) {
                    this.Me = data.Me;
                }
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
            }
        }
        get Me() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set Me(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            Me?: boolean;
            ID?: Uint8Array;
            EntityID?: Uint8Array;
        }): FetchUserReq {
            const message = new FetchUserReq({});
            if (data.Me != null) {
                message.Me = data.Me;
            }
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            return message;
        }
        toObject() {
            const data: {
                Me?: boolean;
                ID?: Uint8Array;
                EntityID?: Uint8Array;
            } = {};
            if (this.Me != null) {
                data.Me = this.Me;
            }
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Me != false)
                writer.writeBool(1, this.Me);
            if (this.ID.length)
                writer.writeBytes(2, this.ID);
            if (this.EntityID.length)
                writer.writeBytes(3, this.EntityID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Me = reader.readBool();
                        break;
                    case 2:
                        message.ID = reader.readBytes();
                        break;
                    case 3:
                        message.EntityID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchUserReq {
            return FetchUserReq.deserialize(bytes);
        }
    }
    export class UpdateUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Firstname?: dependency_2.pbtypes.String;
            Lastname?: dependency_2.pbtypes.String;
            AvatarURL?: dependency_2.pbtypes.String;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Firstname" in data && data.Firstname != undefined) {
                    this.Firstname = data.Firstname;
                }
                if ("Lastname" in data && data.Lastname != undefined) {
                    this.Lastname = data.Lastname;
                }
                if ("AvatarURL" in data && data.AvatarURL != undefined) {
                    this.AvatarURL = data.AvatarURL;
                }
            }
        }
        get Firstname() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 1) as dependency_2.pbtypes.String;
        }
        set Firstname(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Firstname() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Lastname() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 2) as dependency_2.pbtypes.String;
        }
        set Lastname(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Lastname() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get AvatarURL() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 3) as dependency_2.pbtypes.String;
        }
        set AvatarURL(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_AvatarURL() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            Firstname?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            Lastname?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            AvatarURL?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
        }): UpdateUserReq {
            const message = new UpdateUserReq({});
            if (data.Firstname != null) {
                message.Firstname = dependency_2.pbtypes.String.fromObject(data.Firstname);
            }
            if (data.Lastname != null) {
                message.Lastname = dependency_2.pbtypes.String.fromObject(data.Lastname);
            }
            if (data.AvatarURL != null) {
                message.AvatarURL = dependency_2.pbtypes.String.fromObject(data.AvatarURL);
            }
            return message;
        }
        toObject() {
            const data: {
                Firstname?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
                Lastname?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
                AvatarURL?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            } = {};
            if (this.Firstname != null) {
                data.Firstname = this.Firstname.toObject();
            }
            if (this.Lastname != null) {
                data.Lastname = this.Lastname.toObject();
            }
            if (this.AvatarURL != null) {
                data.AvatarURL = this.AvatarURL.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Firstname)
                writer.writeMessage(1, this.Firstname, () => this.Firstname.serialize(writer));
            if (this.has_Lastname)
                writer.writeMessage(2, this.Lastname, () => this.Lastname.serialize(writer));
            if (this.has_AvatarURL)
                writer.writeMessage(3, this.AvatarURL, () => this.AvatarURL.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Firstname, () => message.Firstname = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Lastname, () => message.Lastname = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.AvatarURL, () => message.AvatarURL = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserReq {
            return UpdateUserReq.deserialize(bytes);
        }
    }
    export class ListUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Paginate?: dependency_3.paginate.Paginate;
            Search?: string;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Paginate" in data && data.Paginate != undefined) {
                    this.Paginate = data.Paginate;
                }
                if ("Search" in data && data.Search != undefined) {
                    this.Search = data.Search;
                }
                if ("OwnEntity" in data && data.OwnEntity != undefined) {
                    this.OwnEntity = data.OwnEntity;
                }
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
                if ("EntityIDs" in data && data.EntityIDs != undefined) {
                    this.EntityIDs = data.EntityIDs;
                }
            }
        }
        get Paginate() {
            return pb_1.Message.getWrapperField(this, dependency_3.paginate.Paginate, 1) as dependency_3.paginate.Paginate;
        }
        set Paginate(value: dependency_3.paginate.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Search() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Search(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get OwnEntity() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set OwnEntity(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get EntityIDs() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Uint8Array[];
        }
        set EntityIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            Paginate?: ReturnType<typeof dependency_3.paginate.Paginate.prototype.toObject>;
            Search?: string;
            OwnEntity?: boolean;
            IDs?: Uint8Array[];
            EntityIDs?: Uint8Array[];
        }): ListUserReq {
            const message = new ListUserReq({});
            if (data.Paginate != null) {
                message.Paginate = dependency_3.paginate.Paginate.fromObject(data.Paginate);
            }
            if (data.Search != null) {
                message.Search = data.Search;
            }
            if (data.OwnEntity != null) {
                message.OwnEntity = data.OwnEntity;
            }
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            if (data.EntityIDs != null) {
                message.EntityIDs = data.EntityIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                Paginate?: ReturnType<typeof dependency_3.paginate.Paginate.prototype.toObject>;
                Search?: string;
                OwnEntity?: boolean;
                IDs?: Uint8Array[];
                EntityIDs?: Uint8Array[];
            } = {};
            if (this.Paginate != null) {
                data.Paginate = this.Paginate.toObject();
            }
            if (this.Search != null) {
                data.Search = this.Search;
            }
            if (this.OwnEntity != null) {
                data.OwnEntity = this.OwnEntity;
            }
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            if (this.EntityIDs != null) {
                data.EntityIDs = this.EntityIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Paginate)
                writer.writeMessage(1, this.Paginate, () => this.Paginate.serialize(writer));
            if (this.Search.length)
                writer.writeString(2, this.Search);
            if (this.OwnEntity != false)
                writer.writeBool(3, this.OwnEntity);
            if (this.IDs.length)
                writer.writeRepeatedBytes(4, this.IDs);
            if (this.EntityIDs.length)
                writer.writeRepeatedBytes(5, this.EntityIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Paginate, () => message.Paginate = dependency_3.paginate.Paginate.deserialize(reader));
                        break;
                    case 2:
                        message.Search = reader.readString();
                        break;
                    case 3:
                        message.OwnEntity = reader.readBool();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readBytes());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUserReq {
            return ListUserReq.deserialize(bytes);
        }
    }
    export class UserRoles extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            User?: dependency_4.user.U;
            Roles?: dependency_5.user.Role[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("User" in data && data.User != undefined) {
                    this.User = data.User;
                }
                if ("Roles" in data && data.Roles != undefined) {
                    this.Roles = data.Roles;
                }
            }
        }
        get User() {
            return pb_1.Message.getWrapperField(this, dependency_4.user.U, 1) as dependency_4.user.U;
        }
        set User(value: dependency_4.user.U) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_User() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Roles() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.user.Role, 2) as dependency_5.user.Role[];
        }
        set Roles(value: dependency_5.user.Role[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            User?: ReturnType<typeof dependency_4.user.U.prototype.toObject>;
            Roles?: ReturnType<typeof dependency_5.user.Role.prototype.toObject>[];
        }): UserRoles {
            const message = new UserRoles({});
            if (data.User != null) {
                message.User = dependency_4.user.U.fromObject(data.User);
            }
            if (data.Roles != null) {
                message.Roles = data.Roles.map(item => dependency_5.user.Role.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                User?: ReturnType<typeof dependency_4.user.U.prototype.toObject>;
                Roles?: ReturnType<typeof dependency_5.user.Role.prototype.toObject>[];
            } = {};
            if (this.User != null) {
                data.User = this.User.toObject();
            }
            if (this.Roles != null) {
                data.Roles = this.Roles.map((item: dependency_5.user.Role) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_User)
                writer.writeMessage(1, this.User, () => this.User.serialize(writer));
            if (this.Roles.length)
                writer.writeRepeatedMessage(2, this.Roles, (item: dependency_5.user.Role) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRoles {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRoles();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.User, () => message.User = dependency_4.user.U.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Roles, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.user.Role.deserialize(reader), dependency_5.user.Role));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserRoles {
            return UserRoles.deserialize(bytes);
        }
    }
    export class ListUserResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Users?: UserRoles[];
            Total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Users" in data && data.Users != undefined) {
                    this.Users = data.Users;
                }
                if ("Total" in data && data.Total != undefined) {
                    this.Total = data.Total;
                }
            }
        }
        get Users() {
            return pb_1.Message.getRepeatedWrapperField(this, UserRoles, 1) as UserRoles[];
        }
        set Users(value: UserRoles[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Users?: ReturnType<typeof UserRoles.prototype.toObject>[];
            Total?: number;
        }): ListUserResp {
            const message = new ListUserResp({});
            if (data.Users != null) {
                message.Users = data.Users.map(item => UserRoles.fromObject(item));
            }
            if (data.Total != null) {
                message.Total = data.Total;
            }
            return message;
        }
        toObject() {
            const data: {
                Users?: ReturnType<typeof UserRoles.prototype.toObject>[];
                Total?: number;
            } = {};
            if (this.Users != null) {
                data.Users = this.Users.map((item: UserRoles) => item.toObject());
            }
            if (this.Total != null) {
                data.Total = this.Total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Users.length)
                writer.writeRepeatedMessage(1, this.Users, (item: UserRoles) => item.serialize(writer));
            if (this.Total != 0)
                writer.writeUint64(2, this.Total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUserResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUserResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserRoles.deserialize(reader), UserRoles));
                        break;
                    case 2:
                        message.Total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUserResp {
            return ListUserResp.deserialize(bytes);
        }
    }
    export class InviteUserReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Email?: string;
            EntityID?: Uint8Array;
            RoleIDs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Email" in data && data.Email != undefined) {
                    this.Email = data.Email;
                }
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("RoleIDs" in data && data.RoleIDs != undefined) {
                    this.RoleIDs = data.RoleIDs;
                }
            }
        }
        get Email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get RoleIDs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set RoleIDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            Email?: string;
            EntityID?: Uint8Array;
            RoleIDs?: Uint8Array[];
        }): InviteUserReq {
            const message = new InviteUserReq({});
            if (data.Email != null) {
                message.Email = data.Email;
            }
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.RoleIDs != null) {
                message.RoleIDs = data.RoleIDs;
            }
            return message;
        }
        toObject() {
            const data: {
                Email?: string;
                EntityID?: Uint8Array;
                RoleIDs?: Uint8Array[];
            } = {};
            if (this.Email != null) {
                data.Email = this.Email;
            }
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.RoleIDs != null) {
                data.RoleIDs = this.RoleIDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Email.length)
                writer.writeString(1, this.Email);
            if (this.EntityID.length)
                writer.writeBytes(2, this.EntityID);
            if (this.RoleIDs.length)
                writer.writeRepeatedBytes(3, this.RoleIDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteUserReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteUserReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Email = reader.readString();
                        break;
                    case 2:
                        message.EntityID = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteUserReq {
            return InviteUserReq.deserialize(bytes);
        }
    }
}
