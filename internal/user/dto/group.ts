// @generated by protobuf-ts 2.11.1 with parameter optimize_speed
// @generated from protobuf file "internal/user/dto/group.proto" (package "dto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Group } from "../group";
import { Paginate } from "../../../pkg/paginate/paginate";
import { String$ } from "../../../pkg/pbtypes/string";
/**
 * @generated from protobuf message dto.CreateGroupReq
 */
export interface CreateGroupReq {
    /**
     * @generated from protobuf field: string Name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string Description = 2
     */
    description: string;
    /**
     * @generated from protobuf field: string AvatarURL = 3
     */
    avatarURL: string;
}
/**
 * @generated from protobuf message dto.UpdateGroupReq
 */
export interface UpdateGroupReq {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: pbtypes.String Name = 2
     */
    name?: String$;
    /**
     * @generated from protobuf field: pbtypes.String Description = 3
     */
    description?: String$;
    /**
     * @generated from protobuf field: pbtypes.String AvatarURL = 4
     */
    avatarURL?: String$;
}
/**
 * @generated from protobuf message dto.FetchGroupReq
 */
export interface FetchGroupReq {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
}
/**
 * @generated from protobuf message dto.ListGroupReq
 */
export interface ListGroupReq {
    /**
     * @generated from protobuf field: paginate.Paginate Paginate = 1
     */
    paginate?: Paginate;
    /**
     * @generated from protobuf field: string Search = 2
     */
    search: string;
    /**
     * @generated from protobuf field: bool Own = 3
     */
    own: boolean;
    /**
     * @generated from protobuf field: repeated bytes IDs = 4
     */
    iDs: Uint8Array[];
}
/**
 * @generated from protobuf message dto.ListGroupResp
 */
export interface ListGroupResp {
    /**
     * @generated from protobuf field: repeated user.Group Groups = 1
     */
    groups: Group[];
    /**
     * @generated from protobuf field: uint64 Total = 2
     */
    total: bigint;
}
/**
 * @generated from protobuf message dto.DeleteGroupReq
 */
export interface DeleteGroupReq {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupReq$Type extends MessageType<CreateGroupReq> {
    constructor() {
        super("dto.CreateGroupReq", [
            { no: 1, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "AvatarURL", kind: "scalar", jsonName: "AvatarURL", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupReq>): CreateGroupReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.avatarURL = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGroupReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupReq): CreateGroupReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Name */ 1:
                    message.name = reader.string();
                    break;
                case /* string Description */ 2:
                    message.description = reader.string();
                    break;
                case /* string AvatarURL */ 3:
                    message.avatarURL = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string Description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string AvatarURL = 3; */
        if (message.avatarURL !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatarURL);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.CreateGroupReq
 */
export const CreateGroupReq = new CreateGroupReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupReq$Type extends MessageType<UpdateGroupReq> {
    constructor() {
        super("dto.UpdateGroupReq", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Name", kind: "message", jsonName: "Name", T: () => String$ },
            { no: 3, name: "Description", kind: "message", jsonName: "Description", T: () => String$ },
            { no: 4, name: "AvatarURL", kind: "message", jsonName: "AvatarURL", T: () => String$ }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupReq>): UpdateGroupReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupReq): UpdateGroupReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                case /* pbtypes.String Name */ 2:
                    message.name = String$.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* pbtypes.String Description */ 3:
                    message.description = String$.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* pbtypes.String AvatarURL */ 4:
                    message.avatarURL = String$.internalBinaryRead(reader, reader.uint32(), options, message.avatarURL);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* pbtypes.String Name = 2; */
        if (message.name)
            String$.internalBinaryWrite(message.name, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* pbtypes.String Description = 3; */
        if (message.description)
            String$.internalBinaryWrite(message.description, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* pbtypes.String AvatarURL = 4; */
        if (message.avatarURL)
            String$.internalBinaryWrite(message.avatarURL, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.UpdateGroupReq
 */
export const UpdateGroupReq = new UpdateGroupReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchGroupReq$Type extends MessageType<FetchGroupReq> {
    constructor() {
        super("dto.FetchGroupReq", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<FetchGroupReq>): FetchGroupReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<FetchGroupReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchGroupReq): FetchGroupReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchGroupReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.FetchGroupReq
 */
export const FetchGroupReq = new FetchGroupReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGroupReq$Type extends MessageType<ListGroupReq> {
    constructor() {
        super("dto.ListGroupReq", [
            { no: 1, name: "Paginate", kind: "message", jsonName: "Paginate", T: () => Paginate, options: { "gogoproto.nullable": true } },
            { no: 2, name: "Search", kind: "scalar", jsonName: "Search", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Own", kind: "scalar", jsonName: "Own", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "IDs", kind: "scalar", jsonName: "IDs", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<ListGroupReq>): ListGroupReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.search = "";
        message.own = false;
        message.iDs = [];
        if (value !== undefined)
            reflectionMergePartial<ListGroupReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGroupReq): ListGroupReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* paginate.Paginate Paginate */ 1:
                    message.paginate = Paginate.internalBinaryRead(reader, reader.uint32(), options, message.paginate);
                    break;
                case /* string Search */ 2:
                    message.search = reader.string();
                    break;
                case /* bool Own */ 3:
                    message.own = reader.bool();
                    break;
                case /* repeated bytes IDs */ 4:
                    message.iDs.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGroupReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* paginate.Paginate Paginate = 1; */
        if (message.paginate)
            Paginate.internalBinaryWrite(message.paginate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string Search = 2; */
        if (message.search !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.search);
        /* bool Own = 3; */
        if (message.own !== false)
            writer.tag(3, WireType.Varint).bool(message.own);
        /* repeated bytes IDs = 4; */
        for (let i = 0; i < message.iDs.length; i++)
            writer.tag(4, WireType.LengthDelimited).bytes(message.iDs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListGroupReq
 */
export const ListGroupReq = new ListGroupReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGroupResp$Type extends MessageType<ListGroupResp> {
    constructor() {
        super("dto.ListGroupResp", [
            { no: 1, name: "Groups", kind: "message", jsonName: "Groups", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Group, options: { "gogoproto.nullable": false } },
            { no: 2, name: "Total", kind: "scalar", jsonName: "Total", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListGroupResp>): ListGroupResp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        message.total = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListGroupResp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGroupResp): ListGroupResp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated user.Group Groups */ 1:
                    message.groups.push(Group.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 Total */ 2:
                    message.total = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGroupResp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated user.Group Groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            Group.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 Total = 2; */
        if (message.total !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.ListGroupResp
 */
export const ListGroupResp = new ListGroupResp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupReq$Type extends MessageType<DeleteGroupReq> {
    constructor() {
        super("dto.DeleteGroupReq", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupReq>): DeleteGroupReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupReq): DeleteGroupReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.DeleteGroupReq
 */
export const DeleteGroupReq = new DeleteGroupReq$Type();
