/**
<<<<<<< HEAD
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: internal/user/dto/entity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../pkg/gogoproto/gogo";
import * as dependency_2 from "./../../../pkg/pbtypes/string";
import * as dependency_3 from "./../../../pkg/paginate/paginate";
import * as dependency_4 from "./../entity";
import * as pb_1 from "google-protobuf";
export namespace dto {
    export class CreateEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Name?: string;
            Description?: string;
            AvatarURL?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Description" in data && data.Description != undefined) {
                    this.Description = data.Description;
                }
                if ("AvatarURL" in data && data.AvatarURL != undefined) {
                    this.AvatarURL = data.AvatarURL;
                }
=======
 * @generated from protobuf message dto.CreateEntityReq
 */
export interface CreateEntityReq {
    /**
     * @generated from protobuf field: string Name = 1 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: string Description = 2 [json_name = "Description"];
     */
    description: string;
    /**
     * @generated from protobuf field: string AvatarURL = 3 [json_name = "AvatarURL"];
     */
    avatarURL: string;
}
/**
 * @generated from protobuf message dto.UpdateEntityReq
 */
export interface UpdateEntityReq {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: pbtypes.String Name = 2 [json_name = "Name"];
     */
    name?: String$;
    /**
     * @generated from protobuf field: pbtypes.String Description = 3 [json_name = "Description"];
     */
    description?: String$;
    /**
     * @generated from protobuf field: pbtypes.String AvatarURL = 4 [json_name = "AvatarURL"];
     */
    avatarURL?: String$;
}
/**
 * @generated from protobuf message dto.FetchEntityReq
 */
export interface FetchEntityReq {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
}
/**
 * @generated from protobuf message dto.ListEntityReq
 */
export interface ListEntityReq {
    /**
     * @generated from protobuf field: paginate.Paginate Paginate = 1 [json_name = "Paginate"];
     */
    paginate?: Paginate;
    /**
     * @generated from protobuf field: string Search = 2 [json_name = "Search"];
     */
    search: string;
    /**
     * @generated from protobuf field: bool Own = 3 [json_name = "Own"];
     */
    own: boolean;
    /**
     * @generated from protobuf field: repeated bytes IDs = 4 [json_name = "IDs"];
     */
    iDs: Uint8Array[];
}
/**
 * @generated from protobuf message dto.ListEntityResp
 */
export interface ListEntityResp {
    /**
     * @generated from protobuf field: repeated user.Entity Entities = 1 [json_name = "Entities"];
     */
    entities: Entity[];
    /**
     * @generated from protobuf field: uint64 Total = 2 [json_name = "Total"];
     */
    total: bigint;
}
/**
 * @generated from protobuf message dto.DeleteEntityReq
 */
export interface DeleteEntityReq {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateEntityReq$Type extends MessageType<CreateEntityReq> {
    constructor() {
        super("dto.CreateEntityReq", [
            { no: 1, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "AvatarURL", kind: "scalar", jsonName: "AvatarURL", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEntityReq>): CreateEntityReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.avatarURL = "";
        if (value !== undefined)
            reflectionMergePartial<CreateEntityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEntityReq): CreateEntityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Name = 1 [json_name = "Name"];*/ 1:
                    message.name = reader.string();
                    break;
                case /* string Description = 2 [json_name = "Description"];*/ 2:
                    message.description = reader.string();
                    break;
                case /* string AvatarURL = 3 [json_name = "AvatarURL"];*/ 3:
                    message.avatarURL = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
>>>>>>> 8a5271c (wip)
            }
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get AvatarURL() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set AvatarURL(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            Name?: string;
            Description?: string;
            AvatarURL?: string;
        }): CreateEntityReq {
            const message = new CreateEntityReq({});
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Description != null) {
                message.Description = data.Description;
            }
            if (data.AvatarURL != null) {
                message.AvatarURL = data.AvatarURL;
            }
            return message;
        }
        toObject() {
            const data: {
                Name?: string;
                Description?: string;
                AvatarURL?: string;
            } = {};
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Description != null) {
                data.Description = this.Description;
            }
            if (this.AvatarURL != null) {
                data.AvatarURL = this.AvatarURL;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Name.length)
                writer.writeString(1, this.Name);
            if (this.Description.length)
                writer.writeString(2, this.Description);
            if (this.AvatarURL.length)
                writer.writeString(3, this.AvatarURL);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Name = reader.readString();
                        break;
                    case 2:
                        message.Description = reader.readString();
                        break;
                    case 3:
                        message.AvatarURL = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEntityReq {
            return CreateEntityReq.deserialize(bytes);
        }
    }
    export class UpdateEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Name?: dependency_2.pbtypes.String;
            Description?: dependency_2.pbtypes.String;
            AvatarURL?: dependency_2.pbtypes.String;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Description" in data && data.Description != undefined) {
                    this.Description = data.Description;
                }
                if ("AvatarURL" in data && data.AvatarURL != undefined) {
                    this.AvatarURL = data.AvatarURL;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 2) as dependency_2.pbtypes.String;
        }
        set Name(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Description() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 3) as dependency_2.pbtypes.String;
        }
        set Description(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_Description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get AvatarURL() {
            return pb_1.Message.getWrapperField(this, dependency_2.pbtypes.String, 4) as dependency_2.pbtypes.String;
        }
        set AvatarURL(value: dependency_2.pbtypes.String) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_AvatarURL() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Name?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            Description?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            AvatarURL?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
        }): UpdateEntityReq {
            const message = new UpdateEntityReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.Name != null) {
                message.Name = dependency_2.pbtypes.String.fromObject(data.Name);
            }
            if (data.Description != null) {
                message.Description = dependency_2.pbtypes.String.fromObject(data.Description);
            }
            if (data.AvatarURL != null) {
                message.AvatarURL = dependency_2.pbtypes.String.fromObject(data.AvatarURL);
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Name?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
                Description?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
                AvatarURL?: ReturnType<typeof dependency_2.pbtypes.String.prototype.toObject>;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Name != null) {
                data.Name = this.Name.toObject();
            }
            if (this.Description != null) {
                data.Description = this.Description.toObject();
            }
            if (this.AvatarURL != null) {
                data.AvatarURL = this.AvatarURL.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.has_Name)
                writer.writeMessage(2, this.Name, () => this.Name.serialize(writer));
            if (this.has_Description)
                writer.writeMessage(3, this.Description, () => this.Description.serialize(writer));
            if (this.has_AvatarURL)
                writer.writeMessage(4, this.AvatarURL, () => this.AvatarURL.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.Name, () => message.Name = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.Description, () => message.Description = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.AvatarURL, () => message.AvatarURL = dependency_2.pbtypes.String.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEntityReq {
            return UpdateEntityReq.deserialize(bytes);
        }
    }
    export class FetchEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
        }): FetchEntityReq {
            const message = new FetchEntityReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchEntityReq {
            return FetchEntityReq.deserialize(bytes);
        }
    }
    export class ListEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Paginate?: dependency_3.paginate.Paginate;
            Search?: string;
            Own?: boolean;
            IDs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Paginate" in data && data.Paginate != undefined) {
                    this.Paginate = data.Paginate;
                }
                if ("Search" in data && data.Search != undefined) {
                    this.Search = data.Search;
                }
                if ("Own" in data && data.Own != undefined) {
                    this.Own = data.Own;
                }
                if ("IDs" in data && data.IDs != undefined) {
                    this.IDs = data.IDs;
                }
            }
        }
        get Paginate() {
            return pb_1.Message.getWrapperField(this, dependency_3.paginate.Paginate, 1) as dependency_3.paginate.Paginate;
        }
        set Paginate(value: dependency_3.paginate.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Search() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Search(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Own() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set Own(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get IDs() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as Uint8Array[];
        }
        set IDs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            Paginate?: ReturnType<typeof dependency_3.paginate.Paginate.prototype.toObject>;
            Search?: string;
            Own?: boolean;
            IDs?: Uint8Array[];
        }): ListEntityReq {
            const message = new ListEntityReq({});
            if (data.Paginate != null) {
                message.Paginate = dependency_3.paginate.Paginate.fromObject(data.Paginate);
            }
            if (data.Search != null) {
                message.Search = data.Search;
            }
            if (data.Own != null) {
                message.Own = data.Own;
            }
            if (data.IDs != null) {
                message.IDs = data.IDs;
            }
            return message;
        }
        toObject() {
            const data: {
                Paginate?: ReturnType<typeof dependency_3.paginate.Paginate.prototype.toObject>;
                Search?: string;
                Own?: boolean;
                IDs?: Uint8Array[];
            } = {};
            if (this.Paginate != null) {
                data.Paginate = this.Paginate.toObject();
            }
            if (this.Search != null) {
                data.Search = this.Search;
            }
            if (this.Own != null) {
                data.Own = this.Own;
            }
            if (this.IDs != null) {
                data.IDs = this.IDs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Paginate)
                writer.writeMessage(1, this.Paginate, () => this.Paginate.serialize(writer));
            if (this.Search.length)
                writer.writeString(2, this.Search);
            if (this.Own != false)
                writer.writeBool(3, this.Own);
            if (this.IDs.length)
                writer.writeRepeatedBytes(4, this.IDs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Paginate, () => message.Paginate = dependency_3.paginate.Paginate.deserialize(reader));
                        break;
                    case 2:
                        message.Search = reader.readString();
                        break;
                    case 3:
                        message.Own = reader.readBool();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEntityReq {
            return ListEntityReq.deserialize(bytes);
        }
    }
    export class ListEntityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Entities?: dependency_4.user.Entity[];
            Total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entities" in data && data.Entities != undefined) {
                    this.Entities = data.Entities;
                }
                if ("Total" in data && data.Total != undefined) {
                    this.Total = data.Total;
                }
            }
        }
        get Entities() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.user.Entity, 1) as dependency_4.user.Entity[];
        }
        set Entities(value: dependency_4.user.Entity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get Total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set Total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Entities?: ReturnType<typeof dependency_4.user.Entity.prototype.toObject>[];
            Total?: number;
        }): ListEntityResp {
            const message = new ListEntityResp({});
            if (data.Entities != null) {
                message.Entities = data.Entities.map(item => dependency_4.user.Entity.fromObject(item));
            }
            if (data.Total != null) {
                message.Total = data.Total;
            }
            return message;
        }
        toObject() {
            const data: {
                Entities?: ReturnType<typeof dependency_4.user.Entity.prototype.toObject>[];
                Total?: number;
            } = {};
            if (this.Entities != null) {
                data.Entities = this.Entities.map((item: dependency_4.user.Entity) => item.toObject());
            }
            if (this.Total != null) {
                data.Total = this.Total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Entities.length)
                writer.writeRepeatedMessage(1, this.Entities, (item: dependency_4.user.Entity) => item.serialize(writer));
            if (this.Total != 0)
                writer.writeUint64(2, this.Total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntityResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Entities, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.user.Entity.deserialize(reader), dependency_4.user.Entity));
                        break;
                    case 2:
                        message.Total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEntityResp {
            return ListEntityResp.deserialize(bytes);
        }
    }
    export class DeleteEntityReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
            }
        }
<<<<<<< HEAD
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
        }): DeleteEntityReq {
            const message = new DeleteEntityReq({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteEntityReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteEntityReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteEntityReq {
            return DeleteEntityReq.deserialize(bytes);
        }
    }
    export class DeleteEntityResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Entity?: dependency_4.user.Entity;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entity" in data && data.Entity != undefined) {
                    this.Entity = data.Entity;
                }
            }
        }
        get Entity() {
            return pb_1.Message.getWrapperField(this, dependency_4.user.Entity, 1) as dependency_4.user.Entity;
        }
        set Entity(value: dependency_4.user.Entity) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Entity() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            Entity?: ReturnType<typeof dependency_4.user.Entity.prototype.toObject>;
        }): DeleteEntityResp {
            const message = new DeleteEntityResp({});
            if (data.Entity != null) {
                message.Entity = dependency_4.user.Entity.fromObject(data.Entity);
            }
            return message;
        }
        toObject() {
            const data: {
                Entity?: ReturnType<typeof dependency_4.user.Entity.prototype.toObject>;
            } = {};
            if (this.Entity != null) {
                data.Entity = this.Entity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Entity)
                writer.writeMessage(1, this.Entity, () => this.Entity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteEntityResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteEntityResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Entity, () => message.Entity = dependency_4.user.Entity.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteEntityResp {
            return DeleteEntityResp.deserialize(bytes);
        }
    }
}
=======
        return message;
    }
    internalBinaryWrite(message: DeleteEntityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1 [json_name = "ID"]; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dto.DeleteEntityReq
 */
export const DeleteEntityReq = new DeleteEntityReq$Type();
>>>>>>> 8a5271c (wip)
