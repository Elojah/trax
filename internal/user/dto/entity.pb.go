// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/trax/internal/user/dto/entity.proto

package dto

import (
	fmt "fmt"
	user "github.com/elojah/trax/internal/user"
	_ "github.com/elojah/trax/pkg/gogoproto"
	paginate "github.com/elojah/trax/pkg/paginate"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListEntityReq struct {
	Paginate *paginate.Paginate `protobuf:"bytes,1,opt,name=Paginate,proto3" json:"Paginate,omitempty"`
}

func (m *ListEntityReq) Reset()      { *m = ListEntityReq{} }
func (*ListEntityReq) ProtoMessage() {}
func (*ListEntityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c297b660999e80b1, []int{0}
}
func (m *ListEntityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEntityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEntityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEntityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntityReq.Merge(m, src)
}
func (m *ListEntityReq) XXX_Size() int {
	return m.Size()
}
func (m *ListEntityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntityReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntityReq proto.InternalMessageInfo

type ListEntityResp struct {
	Entities []user.Entity `protobuf:"bytes,1,rep,name=Entities,proto3" json:"Entities"`
}

func (m *ListEntityResp) Reset()      { *m = ListEntityResp{} }
func (*ListEntityResp) ProtoMessage() {}
func (*ListEntityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c297b660999e80b1, []int{1}
}
func (m *ListEntityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEntityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEntityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEntityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEntityResp.Merge(m, src)
}
func (m *ListEntityResp) XXX_Size() int {
	return m.Size()
}
func (m *ListEntityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEntityResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListEntityResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListEntityReq)(nil), "dto.ListEntityReq")
	golang_proto.RegisterType((*ListEntityReq)(nil), "dto.ListEntityReq")
	proto.RegisterType((*ListEntityResp)(nil), "dto.ListEntityResp")
	golang_proto.RegisterType((*ListEntityResp)(nil), "dto.ListEntityResp")
}

func init() {
	proto.RegisterFile("github.com/elojah/trax/internal/user/dto/entity.proto", fileDescriptor_c297b660999e80b1)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/trax/internal/user/dto/entity.proto", fileDescriptor_c297b660999e80b1)
}

var fileDescriptor_c297b660999e80b1 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x7d, 0xd4, 0xab, 0xab, 0x2a, 0x05, 0x86, 0x4c, 0x55, 0x87, 0x43, 0xd5, 0xa9, 0x93,
	0x2d, 0x02, 0xec, 0xa8, 0x52, 0x25, 0x06, 0x06, 0x94, 0x37, 0x48, 0xa9, 0xe5, 0x1a, 0x4a, 0x1c,
	0x92, 0x53, 0x09, 0x36, 0x1e, 0x81, 0xc7, 0xe0, 0x11, 0x18, 0x3b, 0x66, 0xcc, 0xd8, 0x09, 0x61,
	0x67, 0x61, 0xec, 0xc8, 0x88, 0x70, 0x4b, 0xd4, 0x05, 0xc4, 0x76, 0x6c, 0x7f, 0xdf, 0x7f, 0x7e,
	0x07, 0xa7, 0x4a, 0xd3, 0x6c, 0x31, 0xe1, 0x57, 0xe6, 0x56, 0xc8, 0xb9, 0xb9, 0x4e, 0x66, 0x82,
	0xf2, 0xe4, 0x5e, 0xe8, 0x94, 0x64, 0x9e, 0x26, 0x73, 0xb1, 0x28, 0x64, 0x2e, 0xa6, 0x64, 0x84,
	0x4c, 0x49, 0xd3, 0x03, 0xcf, 0x72, 0x43, 0x26, 0x6c, 0x4d, 0xc9, 0xf4, 0xc4, 0x0f, 0x6e, 0x76,
	0xa3, 0x84, 0x32, 0xca, 0x78, 0xd4, 0x4f, 0x1b, 0xab, 0x17, 0xfd, 0x22, 0x64, 0x89, 0xd2, 0x69,
	0x42, 0xb2, 0x19, 0xb6, 0xce, 0xd1, 0x9f, 0x0a, 0xee, 0x96, 0x1b, 0x8c, 0x83, 0xfd, 0x0b, 0x5d,
	0xd0, 0xd8, 0xdf, 0xc5, 0xf2, 0x2e, 0x3c, 0x09, 0xda, 0x97, 0xdb, 0xd4, 0x2e, 0xf4, 0x61, 0xd8,
	0x89, 0x42, 0xde, 0xac, 0xf9, 0x7e, 0x19, 0xfd, 0x2b, 0x5f, 0x0f, 0x21, 0x6e, 0xc8, 0xc1, 0x59,
	0x70, 0xb0, 0x1b, 0x53, 0x64, 0x21, 0x0f, 0xda, 0xfe, 0xa4, 0x65, 0xd1, 0x85, 0x7e, 0x6b, 0xd8,
	0x89, 0xf6, 0xf8, 0xd7, 0x7a, 0xbe, 0x61, 0x7c, 0x02, 0x8b, 0x1b, 0x66, 0x74, 0x5e, 0x5a, 0x64,
	0x95, 0x45, 0xb6, 0xb2, 0xc8, 0xd6, 0x16, 0xe1, 0xc3, 0x22, 0x3c, 0x3a, 0x84, 0x67, 0x87, 0xf0,
	0xe2, 0x10, 0x96, 0x0e, 0xa1, 0x74, 0x08, 0x95, 0x43, 0x78, 0x73, 0x08, 0xef, 0x0e, 0xd9, 0xda,
	0x21, 0x3c, 0xd5, 0xc8, 0x96, 0x35, 0x42, 0x55, 0x23, 0x5b, 0xd5, 0xc8, 0x26, 0xff, 0xfd, 0xcf,
	0x8e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x9f, 0xf3, 0x9e, 0xaf, 0x01, 0x00, 0x00,
}

func (this *ListEntityReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEntityReq)
	if !ok {
		that2, ok := that.(ListEntityReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Paginate.Equal(that1.Paginate) {
		return false
	}
	return true
}
func (this *ListEntityResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEntityResp)
	if !ok {
		that2, ok := that.(ListEntityResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entities) != len(that1.Entities) {
		return false
	}
	for i := range this.Entities {
		if !this.Entities[i].Equal(&that1.Entities[i]) {
			return false
		}
	}
	return true
}
func (this *ListEntityReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.ListEntityReq{")
	if this.Paginate != nil {
		s = append(s, "Paginate: "+fmt.Sprintf("%#v", this.Paginate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListEntityResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.ListEntityResp{")
	if this.Entities != nil {
		vs := make([]user.Entity, len(this.Entities))
		for i := range vs {
			vs[i] = this.Entities[i]
		}
		s = append(s, "Entities: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ListEntityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEntityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEntityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paginate != nil {
		{
			size, err := m.Paginate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEntityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEntityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEntityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedListEntityReq(r randyEntity, easy bool) *ListEntityReq {
	this := &ListEntityReq{}
	if r.Intn(5) != 0 {
		this.Paginate = paginate.NewPopulatedPaginate(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEntityResp(r randyEntity, easy bool) *ListEntityResp {
	this := &ListEntityResp{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Entities = make([]user.Entity, v1)
		for i := 0; i < v1; i++ {
			v2 := user.NewPopulatedEntity(r, easy)
			this.Entities[i] = *v2
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntity(r randyEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntity(r randyEntity) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedEntity(r randyEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntity(dAtA []byte, r randyEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ListEntityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paginate != nil {
		l = m.Paginate.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *ListEntityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListEntityReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEntityReq{`,
		`Paginate:` + strings.Replace(fmt.Sprintf("%v", this.Paginate), "Paginate", "paginate.Paginate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEntityResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntities := "[]Entity{"
	for _, f := range this.Entities {
		repeatedStringForEntities += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForEntities += "}"
	s := strings.Join([]string{`&ListEntityResp{`,
		`Entities:` + repeatedStringForEntities + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEntity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListEntityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEntityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEntityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginate == nil {
				m.Paginate = &paginate.Paginate{}
			}
			if err := m.Paginate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEntityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEntityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEntityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, user.Entity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
