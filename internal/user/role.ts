// @generated by protobuf-ts 2.9.3 with parameter optimize_speed
// @generated from protobuf file "github.com/elojah/trax/internal/user/role.proto" (package "user", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message user.Role
 */
export interface Role {
    /**
     * @generated from protobuf field: bytes ID = 1 [json_name = "ID"];
     */
    iD: Uint8Array;
    /**
     * @generated from protobuf field: bytes EntityID = 2 [json_name = "EntityID"];
     */
    entityID: Uint8Array;
    /**
     * @generated from protobuf field: string Name = 3 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: int64 CreatedAt = 4 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 5 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf message user.Permission
 */
export interface Permission {
    /**
     * @generated from protobuf field: bytes RoleID = 1 [json_name = "RoleID"];
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: user.Resource Resource = 2 [json_name = "Resource"];
     */
    resource: Resource;
    /**
     * @generated from protobuf field: user.Command Command = 3 [json_name = "Command"];
     */
    command: Command;
    /**
     * @generated from protobuf field: int64 CreatedAt = 4 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 5 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf message user.RoleUser
 */
export interface RoleUser {
    /**
     * @generated from protobuf field: bytes RoleID = 1 [json_name = "RoleID"];
     */
    roleID: Uint8Array;
    /**
     * @generated from protobuf field: bytes UserID = 2 [json_name = "UserID"];
     */
    userID: Uint8Array;
    /**
     * @generated from protobuf field: int64 CreatedAt = 3 [json_name = "CreatedAt"];
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 UpdatedAt = 4 [json_name = "UpdatedAt"];
     */
    updatedAt: bigint;
}
/**
 * @generated from protobuf enum user.Resource
 */
export enum Resource {
    /**
     * @generated from protobuf enum value: R_asset = 0;
     */
    R_asset = 0,
    /**
     * @generated from protobuf enum value: R_entity = 1;
     */
    R_entity = 1,
    /**
     * @generated from protobuf enum value: R_operation = 2;
     */
    R_operation = 2,
    /**
     * @generated from protobuf enum value: R_role = 3;
     */
    R_role = 3,
    /**
     * @generated from protobuf enum value: R_user = 4;
     */
    R_user = 4
}
/**
 * @generated from protobuf enum user.Command
 */
export enum Command {
    /**
     * @generated from protobuf enum value: C_read = 0;
     */
    C_read = 0,
    /**
     * @generated from protobuf enum value: C_create = 1;
     */
    C_create = 1,
    /**
     * @generated from protobuf enum value: C_update = 2;
     */
    C_update = 2,
    /**
     * @generated from protobuf enum value: C_delete = 3;
     */
    C_delete = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Role$Type extends MessageType<Role> {
    constructor() {
        super("user.Role", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "EntityID", kind: "scalar", jsonName: "EntityID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 3, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Role>): Role {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.entityID = new Uint8Array(0);
        message.name = "";
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Role>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Role): Role {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.bytes();
                    break;
                case /* bytes EntityID = 2 [json_name = "EntityID"];*/ 2:
                    message.entityID = reader.bytes();
                    break;
                case /* string Name = 3 [json_name = "Name"];*/ 3:
                    message.name = reader.string();
                    break;
                case /* int64 CreatedAt = 4 [json_name = "CreatedAt"];*/ 4:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"];*/ 5:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Role, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1 [json_name = "ID"]; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* bytes EntityID = 2 [json_name = "EntityID"]; */
        if (message.entityID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.entityID);
        /* string Name = 3 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* int64 CreatedAt = 4 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Role
 */
export const Role = new Role$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Permission$Type extends MessageType<Permission> {
    constructor() {
        super("user.Permission", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Resource", kind: "enum", jsonName: "Resource", T: () => ["user.Resource", Resource] },
            { no: 3, name: "Command", kind: "enum", jsonName: "Command", T: () => ["user.Command", Command] },
            { no: 4, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Permission>): Permission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.resource = 0;
        message.command = 0;
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<Permission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Permission): Permission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID = 1 [json_name = "RoleID"];*/ 1:
                    message.roleID = reader.bytes();
                    break;
                case /* user.Resource Resource = 2 [json_name = "Resource"];*/ 2:
                    message.resource = reader.int32();
                    break;
                case /* user.Command Command = 3 [json_name = "Command"];*/ 3:
                    message.command = reader.int32();
                    break;
                case /* int64 CreatedAt = 4 [json_name = "CreatedAt"];*/ 4:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"];*/ 5:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Permission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes RoleID = 1 [json_name = "RoleID"]; */
        if (message.roleID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.roleID);
        /* user.Resource Resource = 2 [json_name = "Resource"]; */
        if (message.resource !== 0)
            writer.tag(2, WireType.Varint).int32(message.resource);
        /* user.Command Command = 3 [json_name = "Command"]; */
        if (message.command !== 0)
            writer.tag(3, WireType.Varint).int32(message.command);
        /* int64 CreatedAt = 4 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 5 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(5, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Permission
 */
export const Permission = new Permission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoleUser$Type extends MessageType<RoleUser> {
    constructor() {
        super("user.RoleUser", [
            { no: 1, name: "RoleID", kind: "scalar", jsonName: "RoleID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "UserID", kind: "scalar", jsonName: "UserID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 3, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoleUser>): RoleUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleID = new Uint8Array(0);
        message.userID = new Uint8Array(0);
        message.createdAt = 0n;
        message.updatedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<RoleUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleUser): RoleUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes RoleID = 1 [json_name = "RoleID"];*/ 1:
                    message.roleID = reader.bytes();
                    break;
                case /* bytes UserID = 2 [json_name = "UserID"];*/ 2:
                    message.userID = reader.bytes();
                    break;
                case /* int64 CreatedAt = 3 [json_name = "CreatedAt"];*/ 3:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 UpdatedAt = 4 [json_name = "UpdatedAt"];*/ 4:
                    message.updatedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes RoleID = 1 [json_name = "RoleID"]; */
        if (message.roleID.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.roleID);
        /* bytes UserID = 2 [json_name = "UserID"]; */
        if (message.userID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.userID);
        /* int64 CreatedAt = 3 [json_name = "CreatedAt"]; */
        if (message.createdAt !== 0n)
            writer.tag(3, WireType.Varint).int64(message.createdAt);
        /* int64 UpdatedAt = 4 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== 0n)
            writer.tag(4, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.RoleUser
 */
export const RoleUser = new RoleUser$Type();
