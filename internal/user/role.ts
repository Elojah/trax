/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: internal/user/role.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../pkg/gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace user {
    export enum Resource {
        R_asset = 0,
        R_entity = 1,
        R_operation = 2,
        R_role = 3,
        R_user = 4
    }
    export enum Command {
        C_read = 0,
        C_edit = 1,
        C_write = 2
    }
    export class Role extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            Name?: string;
            CreatedAt?: number;
            UpdatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("EntityID" in data && data.EntityID != undefined) {
                    this.EntityID = data.EntityID;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("CreatedAt" in data && data.CreatedAt != undefined) {
                    this.CreatedAt = data.CreatedAt;
                }
                if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                    this.UpdatedAt = data.UpdatedAt;
                }
            }
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get EntityID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set EntityID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get CreatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set CreatedAt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get UpdatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set UpdatedAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            EntityID?: Uint8Array;
            Name?: string;
            CreatedAt?: number;
            UpdatedAt?: number;
        }): Role {
            const message = new Role({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (data.EntityID != null) {
                message.EntityID = data.EntityID;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.CreatedAt != null) {
                message.CreatedAt = data.CreatedAt;
            }
            if (data.UpdatedAt != null) {
                message.UpdatedAt = data.UpdatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                EntityID?: Uint8Array;
                Name?: string;
                CreatedAt?: number;
                UpdatedAt?: number;
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.EntityID != null) {
                data.EntityID = this.EntityID;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.CreatedAt != null) {
                data.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != null) {
                data.UpdatedAt = this.UpdatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            if (this.EntityID.length)
                writer.writeBytes(2, this.EntityID);
            if (this.Name.length)
                writer.writeString(3, this.Name);
            if (this.CreatedAt != 0)
                writer.writeInt64(4, this.CreatedAt);
            if (this.UpdatedAt != 0)
                writer.writeInt64(5, this.UpdatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Role {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Role();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        message.EntityID = reader.readBytes();
                        break;
                    case 3:
                        message.Name = reader.readString();
                        break;
                    case 4:
                        message.CreatedAt = reader.readInt64();
                        break;
                    case 5:
                        message.UpdatedAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Role {
            return Role.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            Resource?: Resource;
            Command?: Command;
            CreatedAt?: number;
            UpdatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("Resource" in data && data.Resource != undefined) {
                    this.Resource = data.Resource;
                }
                if ("Command" in data && data.Command != undefined) {
                    this.Command = data.Command;
                }
                if ("CreatedAt" in data && data.CreatedAt != undefined) {
                    this.CreatedAt = data.CreatedAt;
                }
                if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                    this.UpdatedAt = data.UpdatedAt;
                }
            }
        }
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Resource() {
            return pb_1.Message.getFieldWithDefault(this, 2, Resource.R_asset) as Resource;
        }
        set Resource(value: Resource) {
            pb_1.Message.setField(this, 2, value);
        }
        get Command() {
            return pb_1.Message.getFieldWithDefault(this, 3, Command.C_read) as Command;
        }
        set Command(value: Command) {
            pb_1.Message.setField(this, 3, value);
        }
        get CreatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set CreatedAt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get UpdatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set UpdatedAt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            Resource?: Resource;
            Command?: Command;
            CreatedAt?: number;
            UpdatedAt?: number;
        }): Permission {
            const message = new Permission({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.Resource != null) {
                message.Resource = data.Resource;
            }
            if (data.Command != null) {
                message.Command = data.Command;
            }
            if (data.CreatedAt != null) {
                message.CreatedAt = data.CreatedAt;
            }
            if (data.UpdatedAt != null) {
                message.UpdatedAt = data.UpdatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                Resource?: Resource;
                Command?: Command;
                CreatedAt?: number;
                UpdatedAt?: number;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.Resource != null) {
                data.Resource = this.Resource;
            }
            if (this.Command != null) {
                data.Command = this.Command;
            }
            if (this.CreatedAt != null) {
                data.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != null) {
                data.UpdatedAt = this.UpdatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.Resource != Resource.R_asset)
                writer.writeEnum(2, this.Resource);
            if (this.Command != Command.C_read)
                writer.writeEnum(3, this.Command);
            if (this.CreatedAt != 0)
                writer.writeInt64(4, this.CreatedAt);
            if (this.UpdatedAt != 0)
                writer.writeInt64(5, this.UpdatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.Resource = reader.readEnum();
                        break;
                    case 3:
                        message.Command = reader.readEnum();
                        break;
                    case 4:
                        message.CreatedAt = reader.readInt64();
                        break;
                    case 5:
                        message.UpdatedAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    export class RoleUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
            CreatedAt?: number;
            UpdatedAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("RoleID" in data && data.RoleID != undefined) {
                    this.RoleID = data.RoleID;
                }
                if ("UserID" in data && data.UserID != undefined) {
                    this.UserID = data.UserID;
                }
                if ("CreatedAt" in data && data.CreatedAt != undefined) {
                    this.CreatedAt = data.CreatedAt;
                }
                if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                    this.UpdatedAt = data.UpdatedAt;
                }
            }
        }
        get RoleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set RoleID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get UserID() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set UserID(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get CreatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set CreatedAt(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get UpdatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set UpdatedAt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            RoleID?: Uint8Array;
            UserID?: Uint8Array;
            CreatedAt?: number;
            UpdatedAt?: number;
        }): RoleUser {
            const message = new RoleUser({});
            if (data.RoleID != null) {
                message.RoleID = data.RoleID;
            }
            if (data.UserID != null) {
                message.UserID = data.UserID;
            }
            if (data.CreatedAt != null) {
                message.CreatedAt = data.CreatedAt;
            }
            if (data.UpdatedAt != null) {
                message.UpdatedAt = data.UpdatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                RoleID?: Uint8Array;
                UserID?: Uint8Array;
                CreatedAt?: number;
                UpdatedAt?: number;
            } = {};
            if (this.RoleID != null) {
                data.RoleID = this.RoleID;
            }
            if (this.UserID != null) {
                data.UserID = this.UserID;
            }
            if (this.CreatedAt != null) {
                data.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != null) {
                data.UpdatedAt = this.UpdatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.RoleID.length)
                writer.writeBytes(1, this.RoleID);
            if (this.UserID.length)
                writer.writeBytes(2, this.UserID);
            if (this.CreatedAt != 0)
                writer.writeInt64(3, this.CreatedAt);
            if (this.UpdatedAt != 0)
                writer.writeInt64(4, this.UpdatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoleUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoleUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.RoleID = reader.readBytes();
                        break;
                    case 2:
                        message.UserID = reader.readBytes();
                        break;
                    case 3:
                        message.CreatedAt = reader.readInt64();
                        break;
                    case 4:
                        message.UpdatedAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoleUser {
            return RoleUser.deserialize(bytes);
        }
    }
}
