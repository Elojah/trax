/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: internal/user/claims.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../pkg/gogoproto/gogo";
import * as dependency_2 from "./../../pkg/pbtypes/empty";
import * as pb_1 from "google-protobuf";
export namespace user {
    export class ClaimResources extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Commands?: Map<string, dependency_2.pbtypes.Empty>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Commands" in data && data.Commands != undefined) {
                    this.Commands = data.Commands;
                }
            }
            if (!this.Commands)
                this.Commands = new Map();
        }
        get Commands() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_2.pbtypes.Empty>;
        }
        set Commands(value: Map<string, dependency_2.pbtypes.Empty>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            Commands?: {
                [key: string]: ReturnType<typeof dependency_2.pbtypes.Empty.prototype.toObject>;
            };
        }): ClaimResources {
            const message = new ClaimResources({});
            if (typeof data.Commands == "object") {
                message.Commands = new Map(Object.entries(data.Commands).map(([key, value]) => [key, dependency_2.pbtypes.Empty.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                Commands?: {
                    [key: string]: ReturnType<typeof dependency_2.pbtypes.Empty.prototype.toObject>;
                };
            } = {};
            if (this.Commands != null) {
                data.Commands = (Object.fromEntries)((Array.from)(this.Commands).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.Commands) {
                writer.writeMessage(1, this.Commands, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClaimResources {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClaimResources();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Commands as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.pbtypes.Empty.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClaimResources {
            return ClaimResources.deserialize(bytes);
        }
    }
    export class ClaimEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ID?: Uint8Array;
            Roles?: Map<string, dependency_2.pbtypes.Empty>;
            Resources?: Map<string, ClaimResources>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ID" in data && data.ID != undefined) {
                    this.ID = data.ID;
                }
                if ("Roles" in data && data.Roles != undefined) {
                    this.Roles = data.Roles;
                }
                if ("Resources" in data && data.Resources != undefined) {
                    this.Resources = data.Resources;
                }
            }
            if (!this.Roles)
                this.Roles = new Map();
            if (!this.Resources)
                this.Resources = new Map();
        }
        get ID() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ID(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Roles() {
            return pb_1.Message.getField(this, 2) as any as Map<string, dependency_2.pbtypes.Empty>;
        }
        set Roles(value: Map<string, dependency_2.pbtypes.Empty>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get Resources() {
            return pb_1.Message.getField(this, 3) as any as Map<string, ClaimResources>;
        }
        set Resources(value: Map<string, ClaimResources>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            ID?: Uint8Array;
            Roles?: {
                [key: string]: ReturnType<typeof dependency_2.pbtypes.Empty.prototype.toObject>;
            };
            Resources?: {
                [key: string]: ReturnType<typeof ClaimResources.prototype.toObject>;
            };
        }): ClaimEntity {
            const message = new ClaimEntity({});
            if (data.ID != null) {
                message.ID = data.ID;
            }
            if (typeof data.Roles == "object") {
                message.Roles = new Map(Object.entries(data.Roles).map(([key, value]) => [key, dependency_2.pbtypes.Empty.fromObject(value)]));
            }
            if (typeof data.Resources == "object") {
                message.Resources = new Map(Object.entries(data.Resources).map(([key, value]) => [key, ClaimResources.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                ID?: Uint8Array;
                Roles?: {
                    [key: string]: ReturnType<typeof dependency_2.pbtypes.Empty.prototype.toObject>;
                };
                Resources?: {
                    [key: string]: ReturnType<typeof ClaimResources.prototype.toObject>;
                };
            } = {};
            if (this.ID != null) {
                data.ID = this.ID;
            }
            if (this.Roles != null) {
                data.Roles = (Object.fromEntries)((Array.from)(this.Roles).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.Resources != null) {
                data.Resources = (Object.fromEntries)((Array.from)(this.Resources).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ID.length)
                writer.writeBytes(1, this.ID);
            for (const [key, value] of this.Roles) {
                writer.writeMessage(2, this.Roles, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.Resources) {
                writer.writeMessage(3, this.Resources, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClaimEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClaimEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ID = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Roles as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.pbtypes.Empty.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Resources as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ClaimResources.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClaimEntity {
            return ClaimEntity.deserialize(bytes);
        }
    }
    export class ClaimAuth extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Entities?: Map<string, ClaimEntity>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Entities" in data && data.Entities != undefined) {
                    this.Entities = data.Entities;
                }
            }
            if (!this.Entities)
                this.Entities = new Map();
        }
        get Entities() {
            return pb_1.Message.getField(this, 1) as any as Map<string, ClaimEntity>;
        }
        set Entities(value: Map<string, ClaimEntity>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            Entities?: {
                [key: string]: ReturnType<typeof ClaimEntity.prototype.toObject>;
            };
        }): ClaimAuth {
            const message = new ClaimAuth({});
            if (typeof data.Entities == "object") {
                message.Entities = new Map(Object.entries(data.Entities).map(([key, value]) => [key, ClaimEntity.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                Entities?: {
                    [key: string]: ReturnType<typeof ClaimEntity.prototype.toObject>;
                };
            } = {};
            if (this.Entities != null) {
                data.Entities = (Object.fromEntries)((Array.from)(this.Entities).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.Entities) {
                writer.writeMessage(1, this.Entities, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClaimAuth {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClaimAuth();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Entities as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ClaimEntity.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClaimAuth {
            return ClaimAuth.deserialize(bytes);
        }
    }
}
