// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,optimize_speed,long_type_string
// @generated from protobuf file "internal/user/claims.proto" (package "user", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Empty } from "../../pkg/pbtypes/empty";
/**
 * @generated from protobuf message user.ClaimResources
 */
export interface ClaimResources {
    /**
     * Commands key must be a user.Commands
     *
     * @generated from protobuf field: map<string, pbtypes.Empty> Commands = 1
     */
    commands: {
        [key: string]: Empty;
    };
}
/**
 * @generated from protobuf message user.ClaimGroup
 */
export interface ClaimGroup {
    /**
     * @generated from protobuf field: bytes ID = 1
     */
    iD: Uint8Array;
    /**
     * Roles key must be a user.Role ID
     *
     * @generated from protobuf field: map<string, pbtypes.Empty> Roles = 2
     */
    roles: {
        [key: string]: Empty;
    };
    /**
     * Resources key must be a user.Resource
     *
     * @generated from protobuf field: map<string, user.ClaimResources> Resources = 3
     */
    resources: {
        [key: string]: ClaimResources;
    };
}
/**
 * @generated from protobuf message user.ClaimAuth
 */
export interface ClaimAuth {
    /**
     * Groups key must be a group.ID
     *
     * @generated from protobuf field: map<string, user.ClaimGroup> Groups = 1
     */
    groups: {
        [key: string]: ClaimGroup;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ClaimResources$Type extends MessageType<ClaimResources> {
    constructor() {
        super("user.ClaimResources", [
            { no: 1, name: "Commands", kind: "map", jsonName: "Commands", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Empty }, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<ClaimResources>): ClaimResources {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commands = {};
        if (value !== undefined)
            reflectionMergePartial<ClaimResources>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimResources): ClaimResources {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, pbtypes.Empty> Commands */ 1:
                    this.binaryReadMap1(message.commands, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ClaimResources["commands"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClaimResources["commands"] | undefined, val: ClaimResources["commands"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Empty.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for user.ClaimResources.Commands");
            }
        }
        map[key ?? ""] = val ?? Empty.create();
    }
    internalBinaryWrite(message: ClaimResources, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, pbtypes.Empty> Commands = 1; */
        for (let k of globalThis.Object.keys(message.commands)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Empty.internalBinaryWrite(message.commands[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.ClaimResources
 */
export const ClaimResources = new ClaimResources$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClaimGroup$Type extends MessageType<ClaimGroup> {
    constructor() {
        super("user.ClaimGroup", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/elojah/trax/pkg/ulid.ID" } },
            { no: 2, name: "Roles", kind: "map", jsonName: "Roles", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Empty }, options: { "gogoproto.nullable": false } },
            { no: 3, name: "Resources", kind: "map", jsonName: "Resources", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ClaimResources }, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<ClaimGroup>): ClaimGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = new Uint8Array(0);
        message.roles = {};
        message.resources = {};
        if (value !== undefined)
            reflectionMergePartial<ClaimGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimGroup): ClaimGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ID */ 1:
                    message.iD = reader.bytes();
                    break;
                case /* map<string, pbtypes.Empty> Roles */ 2:
                    this.binaryReadMap2(message.roles, reader, options);
                    break;
                case /* map<string, user.ClaimResources> Resources */ 3:
                    this.binaryReadMap3(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ClaimGroup["roles"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClaimGroup["roles"] | undefined, val: ClaimGroup["roles"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Empty.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for user.ClaimGroup.Roles");
            }
        }
        map[key ?? ""] = val ?? Empty.create();
    }
    private binaryReadMap3(map: ClaimGroup["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClaimGroup["resources"] | undefined, val: ClaimGroup["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ClaimResources.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for user.ClaimGroup.Resources");
            }
        }
        map[key ?? ""] = val ?? ClaimResources.create();
    }
    internalBinaryWrite(message: ClaimGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ID = 1; */
        if (message.iD.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.iD);
        /* map<string, pbtypes.Empty> Roles = 2; */
        for (let k of globalThis.Object.keys(message.roles)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Empty.internalBinaryWrite(message.roles[k], writer, options);
            writer.join().join();
        }
        /* map<string, user.ClaimResources> Resources = 3; */
        for (let k of globalThis.Object.keys(message.resources)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ClaimResources.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.ClaimGroup
 */
export const ClaimGroup = new ClaimGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClaimAuth$Type extends MessageType<ClaimAuth> {
    constructor() {
        super("user.ClaimAuth", [
            { no: 1, name: "Groups", kind: "map", jsonName: "Groups", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ClaimGroup }, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<ClaimAuth>): ClaimAuth {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = {};
        if (value !== undefined)
            reflectionMergePartial<ClaimAuth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimAuth): ClaimAuth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, user.ClaimGroup> Groups */ 1:
                    this.binaryReadMap1(message.groups, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ClaimAuth["groups"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClaimAuth["groups"] | undefined, val: ClaimAuth["groups"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ClaimGroup.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for user.ClaimAuth.Groups");
            }
        }
        map[key ?? ""] = val ?? ClaimGroup.create();
    }
    internalBinaryWrite(message: ClaimAuth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, user.ClaimGroup> Groups = 1; */
        for (let k of globalThis.Object.keys(message.groups)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ClaimGroup.internalBinaryWrite(message.groups[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.ClaimAuth
 */
export const ClaimAuth = new ClaimAuth$Type();
