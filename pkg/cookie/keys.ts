/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: pkg/cookie/keys.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace cookie {
    export class Keys extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Hash?: Uint8Array;
            Block?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Hash" in data && data.Hash != undefined) {
                    this.Hash = data.Hash;
                }
                if ("Block" in data && data.Block != undefined) {
                    this.Block = data.Block;
                }
            }
        }
        get Hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set Hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get Block() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set Block(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            Hash?: Uint8Array;
            Block?: Uint8Array;
        }): Keys {
            const message = new Keys({});
            if (data.Hash != null) {
                message.Hash = data.Hash;
            }
            if (data.Block != null) {
                message.Block = data.Block;
            }
            return message;
        }
        toObject() {
            const data: {
                Hash?: Uint8Array;
                Block?: Uint8Array;
            } = {};
            if (this.Hash != null) {
                data.Hash = this.Hash;
            }
            if (this.Block != null) {
                data.Block = this.Block;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Hash.length)
                writer.writeBytes(1, this.Hash);
            if (this.Block.length)
                writer.writeBytes(2, this.Block);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Keys {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Keys();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Hash = reader.readBytes();
                        break;
                    case 2:
                        message.Block = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Keys {
            return Keys.deserialize(bytes);
        }
    }
}
