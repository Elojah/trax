// @generated by protobuf-ts 2.9.3 with parameter optimize_speed
// @generated from protobuf file "github.com/elojah/trax/pkg/twitch/follow.proto" (package "twitch", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message twitch.Follow
 */
export interface Follow {
    /**
     * @generated from protobuf field: string FromID = 1 [json_name = "FromID"];
     */
    fromID: string;
    /**
     * @generated from protobuf field: string FromLogin = 2 [json_name = "FromLogin"];
     */
    fromLogin: string;
    /**
     * @generated from protobuf field: string FromName = 3 [json_name = "FromName"];
     */
    fromName: string;
    /**
     * @generated from protobuf field: string ToID = 4 [json_name = "ToID"];
     */
    toID: string;
    /**
     * @generated from protobuf field: string ToLogin = 5 [json_name = "ToLogin"];
     */
    toLogin: string;
    /**
     * @generated from protobuf field: string ToName = 6 [json_name = "ToName"];
     */
    toName: string;
    /**
     * @generated from protobuf field: string FollowedAt = 7 [json_name = "FollowedAt"];
     */
    followedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Follow$Type extends MessageType<Follow> {
    constructor() {
        super("twitch.Follow", [
            { no: 1, name: "FromID", kind: "scalar", jsonName: "FromID", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "from_id" } },
            { no: 2, name: "FromLogin", kind: "scalar", jsonName: "FromLogin", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "from_login" } },
            { no: 3, name: "FromName", kind: "scalar", jsonName: "FromName", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "from_name" } },
            { no: 4, name: "ToID", kind: "scalar", jsonName: "ToID", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "to_id" } },
            { no: 5, name: "ToLogin", kind: "scalar", jsonName: "ToLogin", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "to_login" } },
            { no: 6, name: "ToName", kind: "scalar", jsonName: "ToName", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "to_name" } },
            { no: 7, name: "FollowedAt", kind: "scalar", jsonName: "FollowedAt", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "followed_at" } }
        ]);
    }
    create(value?: PartialMessage<Follow>): Follow {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromID = "";
        message.fromLogin = "";
        message.fromName = "";
        message.toID = "";
        message.toLogin = "";
        message.toName = "";
        message.followedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Follow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Follow): Follow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string FromID = 1 [json_name = "FromID"];*/ 1:
                    message.fromID = reader.string();
                    break;
                case /* string FromLogin = 2 [json_name = "FromLogin"];*/ 2:
                    message.fromLogin = reader.string();
                    break;
                case /* string FromName = 3 [json_name = "FromName"];*/ 3:
                    message.fromName = reader.string();
                    break;
                case /* string ToID = 4 [json_name = "ToID"];*/ 4:
                    message.toID = reader.string();
                    break;
                case /* string ToLogin = 5 [json_name = "ToLogin"];*/ 5:
                    message.toLogin = reader.string();
                    break;
                case /* string ToName = 6 [json_name = "ToName"];*/ 6:
                    message.toName = reader.string();
                    break;
                case /* string FollowedAt = 7 [json_name = "FollowedAt"];*/ 7:
                    message.followedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Follow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string FromID = 1 [json_name = "FromID"]; */
        if (message.fromID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromID);
        /* string FromLogin = 2 [json_name = "FromLogin"]; */
        if (message.fromLogin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromLogin);
        /* string FromName = 3 [json_name = "FromName"]; */
        if (message.fromName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromName);
        /* string ToID = 4 [json_name = "ToID"]; */
        if (message.toID !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.toID);
        /* string ToLogin = 5 [json_name = "ToLogin"]; */
        if (message.toLogin !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toLogin);
        /* string ToName = 6 [json_name = "ToName"]; */
        if (message.toName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.toName);
        /* string FollowedAt = 7 [json_name = "FollowedAt"]; */
        if (message.followedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.followedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitch.Follow
 */
export const Follow = new Follow$Type();
