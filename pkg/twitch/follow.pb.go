// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/elojah/trax/pkg/twitch/follow.proto

package twitch

import (
	fmt "fmt"
	_ "github.com/elojah/trax/pkg/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Follow struct {
	FromID     string `protobuf:"bytes,1,opt,name=FromID,proto3" json:"from_id"`
	FromLogin  string `protobuf:"bytes,2,opt,name=FromLogin,proto3" json:"from_login"`
	FromName   string `protobuf:"bytes,3,opt,name=FromName,proto3" json:"from_name"`
	ToID       string `protobuf:"bytes,4,opt,name=ToID,proto3" json:"to_id"`
	ToLogin    string `protobuf:"bytes,5,opt,name=ToLogin,proto3" json:"to_login"`
	ToName     string `protobuf:"bytes,6,opt,name=ToName,proto3" json:"to_name"`
	FollowedAt string `protobuf:"bytes,7,opt,name=FollowedAt,proto3" json:"followed_at"`
}

func (m *Follow) Reset()      { *m = Follow{} }
func (*Follow) ProtoMessage() {}
func (*Follow) Descriptor() ([]byte, []int) {
	return fileDescriptor_303761ef943ec3c8, []int{0}
}
func (m *Follow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Follow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Follow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Follow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Follow.Merge(m, src)
}
func (m *Follow) XXX_Size() int {
	return m.Size()
}
func (m *Follow) XXX_DiscardUnknown() {
	xxx_messageInfo_Follow.DiscardUnknown(m)
}

var xxx_messageInfo_Follow proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Follow)(nil), "twitch.Follow")
	golang_proto.RegisterType((*Follow)(nil), "twitch.Follow")
}

func init() {
	proto.RegisterFile("github.com/elojah/trax/pkg/twitch/follow.proto", fileDescriptor_303761ef943ec3c8)
}
func init() {
	golang_proto.RegisterFile("github.com/elojah/trax/pkg/twitch/follow.proto", fileDescriptor_303761ef943ec3c8)
}

var fileDescriptor_303761ef943ec3c8 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x4f, 0xf2, 0x50,
	0x18, 0xc5, 0xef, 0xe5, 0x85, 0x42, 0x2f, 0xef, 0x9f, 0xe4, 0x4e, 0xcd, 0x9b, 0xf8, 0xd4, 0x68,
	0x62, 0x34, 0x31, 0x54, 0xe5, 0x13, 0x48, 0x08, 0x91, 0xc4, 0x38, 0x34, 0xec, 0xa4, 0x40, 0x29,
	0xd5, 0x96, 0x87, 0x90, 0x6b, 0x58, 0xfd, 0x08, 0x7e, 0x07, 0x17, 0x3f, 0x82, 0x23, 0x23, 0x23,
	0x23, 0x53, 0x63, 0x6f, 0x17, 0xd3, 0x89, 0xd1, 0xd1, 0xf4, 0xb6, 0x8a, 0x93, 0xdb, 0xd3, 0x73,
	0x7e, 0xa7, 0x27, 0xe7, 0xb2, 0x73, 0xcf, 0x17, 0x93, 0xfb, 0x41, 0x63, 0x88, 0xa1, 0xe5, 0x06,
	0x78, 0xeb, 0x4c, 0x2c, 0xcf, 0x09, 0xdd, 0xfe, 0x59, 0xd3, 0x9a, 0xdd, 0x79, 0x96, 0x58, 0xf8,
	0x62, 0x38, 0xb1, 0xc6, 0x18, 0x04, 0xb8, 0x68, 0xcc, 0xe6, 0x28, 0x90, 0x6b, 0xb9, 0xf8, 0xff,
	0xe2, 0xe7, 0xa8, 0x87, 0x1e, 0xaa, 0x80, 0xba, 0xf2, 0xec, 0xc1, 0x53, 0x89, 0x69, 0x1d, 0xf5,
	0x33, 0x7e, 0xc8, 0xb4, 0xce, 0x1c, 0xc3, 0x6e, 0xdb, 0xa0, 0xfb, 0xf4, 0x58, 0x6f, 0xd5, 0xd3,
	0xc8, 0xac, 0x8e, 0xe7, 0x18, 0xf6, 0xfd, 0x91, 0x5d, 0x58, 0xfc, 0x94, 0xe9, 0xd9, 0x75, 0x8d,
	0x9e, 0x3f, 0x35, 0x4a, 0x8a, 0xfb, 0x9b, 0x46, 0x26, 0x53, 0x5c, 0x90, 0xa9, 0xf6, 0x0e, 0xe0,
	0x27, 0xac, 0x96, 0x7d, 0xdc, 0x38, 0xa1, 0x6b, 0xfc, 0x52, 0xf0, 0x9f, 0x34, 0x32, 0x75, 0x05,
	0x4f, 0x9d, 0xd0, 0xb5, 0xbf, 0x6c, 0xbe, 0xc7, 0xca, 0x3d, 0xec, 0xb6, 0x8d, 0xb2, 0xc2, 0xf4,
	0x34, 0x32, 0x2b, 0x02, 0xb3, 0x66, 0x25, 0xf3, 0x23, 0x56, 0xed, 0x61, 0xde, 0x5a, 0x51, 0xc4,
	0xef, 0x34, 0x32, 0x6b, 0x02, 0x8b, 0xce, 0x4f, 0x33, 0x1b, 0xd1, 0x43, 0xd5, 0xa7, 0xed, 0x46,
	0x08, 0xcc, 0xdb, 0x0a, 0x8b, 0x5b, 0x8c, 0xe5, 0x9b, 0xdd, 0xd1, 0xa5, 0x30, 0xaa, 0x0a, 0xfc,
	0x97, 0x46, 0x66, 0x7d, 0x5c, 0xa8, 0x7d, 0x47, 0xd8, 0xdf, 0x90, 0xd6, 0xd5, 0x2a, 0x06, 0xb2,
	0x8e, 0x81, 0x6c, 0x62, 0x20, 0xdb, 0x18, 0xe8, 0x7b, 0x0c, 0xf4, 0x41, 0x02, 0x7d, 0x96, 0x40,
	0x5f, 0x24, 0xd0, 0xa5, 0x04, 0xba, 0x92, 0x40, 0xd7, 0x12, 0xe8, 0xab, 0x04, 0xfa, 0x26, 0x81,
	0x6c, 0x25, 0xd0, 0xc7, 0x04, 0xc8, 0x32, 0x01, 0xba, 0x4e, 0x80, 0x6c, 0x12, 0x20, 0x03, 0x4d,
	0x3d, 0x7b, 0xf3, 0x23, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x71, 0x99, 0x2f, 0xe7, 0x01, 0x00, 0x00,
}

func (this *Follow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Follow)
	if !ok {
		that2, ok := that.(Follow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromID != that1.FromID {
		return false
	}
	if this.FromLogin != that1.FromLogin {
		return false
	}
	if this.FromName != that1.FromName {
		return false
	}
	if this.ToID != that1.ToID {
		return false
	}
	if this.ToLogin != that1.ToLogin {
		return false
	}
	if this.ToName != that1.ToName {
		return false
	}
	if this.FollowedAt != that1.FollowedAt {
		return false
	}
	return true
}
func (this *Follow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&twitch.Follow{")
	s = append(s, "FromID: "+fmt.Sprintf("%#v", this.FromID)+",\n")
	s = append(s, "FromLogin: "+fmt.Sprintf("%#v", this.FromLogin)+",\n")
	s = append(s, "FromName: "+fmt.Sprintf("%#v", this.FromName)+",\n")
	s = append(s, "ToID: "+fmt.Sprintf("%#v", this.ToID)+",\n")
	s = append(s, "ToLogin: "+fmt.Sprintf("%#v", this.ToLogin)+",\n")
	s = append(s, "ToName: "+fmt.Sprintf("%#v", this.ToName)+",\n")
	s = append(s, "FollowedAt: "+fmt.Sprintf("%#v", this.FollowedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFollow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Follow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Follow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Follow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FollowedAt) > 0 {
		i -= len(m.FollowedAt)
		copy(dAtA[i:], m.FollowedAt)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.FollowedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToName) > 0 {
		i -= len(m.ToName)
		copy(dAtA[i:], m.ToName)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.ToName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToLogin) > 0 {
		i -= len(m.ToLogin)
		copy(dAtA[i:], m.ToLogin)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.ToLogin)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToID) > 0 {
		i -= len(m.ToID)
		copy(dAtA[i:], m.ToID)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.ToID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromName) > 0 {
		i -= len(m.FromName)
		copy(dAtA[i:], m.FromName)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.FromName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromLogin) > 0 {
		i -= len(m.FromLogin)
		copy(dAtA[i:], m.FromLogin)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.FromLogin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromID) > 0 {
		i -= len(m.FromID)
		copy(dAtA[i:], m.FromID)
		i = encodeVarintFollow(dAtA, i, uint64(len(m.FromID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFollow(dAtA []byte, offset int, v uint64) int {
	offset -= sovFollow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFollow(r randyFollow, easy bool) *Follow {
	this := &Follow{}
	this.FromID = string(randStringFollow(r))
	this.FromLogin = string(randStringFollow(r))
	this.FromName = string(randStringFollow(r))
	this.ToID = string(randStringFollow(r))
	this.ToLogin = string(randStringFollow(r))
	this.ToName = string(randStringFollow(r))
	this.FollowedAt = string(randStringFollow(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyFollow interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFollow(r randyFollow) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFollow(r randyFollow) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneFollow(r)
	}
	return string(tmps)
}
func randUnrecognizedFollow(r randyFollow, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFollow(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFollow(dAtA []byte, r randyFollow, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFollow(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFollow(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Follow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromID)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.FromLogin)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.ToID)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.ToLogin)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	l = len(m.FollowedAt)
	if l > 0 {
		n += 1 + l + sovFollow(uint64(l))
	}
	return n
}

func sovFollow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFollow(x uint64) (n int) {
	return sovFollow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Follow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Follow{`,
		`FromID:` + fmt.Sprintf("%v", this.FromID) + `,`,
		`FromLogin:` + fmt.Sprintf("%v", this.FromLogin) + `,`,
		`FromName:` + fmt.Sprintf("%v", this.FromName) + `,`,
		`ToID:` + fmt.Sprintf("%v", this.ToID) + `,`,
		`ToLogin:` + fmt.Sprintf("%v", this.ToLogin) + `,`,
		`ToName:` + fmt.Sprintf("%v", this.ToName) + `,`,
		`FollowedAt:` + fmt.Sprintf("%v", this.FollowedAt) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFollow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Follow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFollow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Follow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Follow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromLogin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromLogin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLogin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToLogin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFollow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFollow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFollow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFollow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFollow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFollow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFollow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFollow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFollow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFollow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFollow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFollow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFollow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFollow = fmt.Errorf("proto: unexpected end of group")
)
