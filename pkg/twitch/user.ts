// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "github.com/elojah/trax/pkg/twitch/user.proto" (package "twitch", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message twitch.User
 */
export interface User {
    /**
     * @generated from protobuf field: string ID = 1 [json_name = "ID"];
     */
    iD: string;
    /**
     * @generated from protobuf field: string Login = 2 [json_name = "Login"];
     */
    login: string;
    /**
     * @generated from protobuf field: string DisplayName = 3 [json_name = "DisplayName"];
     */
    displayName: string;
    /**
     * @generated from protobuf field: string BroadcasterType = 4 [json_name = "BroadcasterType"];
     */
    broadcasterType: string;
    /**
     * @generated from protobuf field: string Description = 5 [json_name = "Description"];
     */
    description: string;
    /**
     * @generated from protobuf field: string ProfileImageURL = 6 [json_name = "ProfileImageURL"];
     */
    profileImageURL: string;
    /**
     * @generated from protobuf field: string OfflineImageURL = 7 [json_name = "OfflineImageURL"];
     */
    offlineImageURL: string;
    /**
     * @generated from protobuf field: int64 ViewCount = 8 [json_name = "ViewCount"];
     */
    viewCount: bigint;
    /**
     * @generated from protobuf field: string Email = 9 [json_name = "Email"];
     */
    email: string;
    /**
     * @generated from protobuf field: string CreatedAt = 10 [json_name = "CreatedAt"];
     */
    createdAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("twitch.User", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "id" } },
            { no: 2, name: "Login", kind: "scalar", jsonName: "Login", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "login" } },
            { no: 3, name: "DisplayName", kind: "scalar", jsonName: "DisplayName", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "display_name" } },
            { no: 4, name: "BroadcasterType", kind: "scalar", jsonName: "BroadcasterType", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "broadcaster_type" } },
            { no: 5, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "description" } },
            { no: 6, name: "ProfileImageURL", kind: "scalar", jsonName: "ProfileImageURL", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "profile_image_url" } },
            { no: 7, name: "OfflineImageURL", kind: "scalar", jsonName: "OfflineImageURL", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "offline_image_url" } },
            { no: 8, name: "ViewCount", kind: "scalar", jsonName: "ViewCount", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.jsontag": "view_count" } },
            { no: 9, name: "Email", kind: "scalar", jsonName: "Email", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "email" } },
            { no: 10, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.jsontag": "created_at" } }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = "";
        message.login = "";
        message.displayName = "";
        message.broadcasterType = "";
        message.description = "";
        message.profileImageURL = "";
        message.offlineImageURL = "";
        message.viewCount = 0n;
        message.email = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.string();
                    break;
                case /* string Login = 2 [json_name = "Login"];*/ 2:
                    message.login = reader.string();
                    break;
                case /* string DisplayName = 3 [json_name = "DisplayName"];*/ 3:
                    message.displayName = reader.string();
                    break;
                case /* string BroadcasterType = 4 [json_name = "BroadcasterType"];*/ 4:
                    message.broadcasterType = reader.string();
                    break;
                case /* string Description = 5 [json_name = "Description"];*/ 5:
                    message.description = reader.string();
                    break;
                case /* string ProfileImageURL = 6 [json_name = "ProfileImageURL"];*/ 6:
                    message.profileImageURL = reader.string();
                    break;
                case /* string OfflineImageURL = 7 [json_name = "OfflineImageURL"];*/ 7:
                    message.offlineImageURL = reader.string();
                    break;
                case /* int64 ViewCount = 8 [json_name = "ViewCount"];*/ 8:
                    message.viewCount = reader.int64().toBigInt();
                    break;
                case /* string Email = 9 [json_name = "Email"];*/ 9:
                    message.email = reader.string();
                    break;
                case /* string CreatedAt = 10 [json_name = "CreatedAt"];*/ 10:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ID = 1 [json_name = "ID"]; */
        if (message.iD !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iD);
        /* string Login = 2 [json_name = "Login"]; */
        if (message.login !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.login);
        /* string DisplayName = 3 [json_name = "DisplayName"]; */
        if (message.displayName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.displayName);
        /* string BroadcasterType = 4 [json_name = "BroadcasterType"]; */
        if (message.broadcasterType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.broadcasterType);
        /* string Description = 5 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string ProfileImageURL = 6 [json_name = "ProfileImageURL"]; */
        if (message.profileImageURL !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.profileImageURL);
        /* string OfflineImageURL = 7 [json_name = "OfflineImageURL"]; */
        if (message.offlineImageURL !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.offlineImageURL);
        /* int64 ViewCount = 8 [json_name = "ViewCount"]; */
        if (message.viewCount !== 0n)
            writer.tag(8, WireType.Varint).int64(message.viewCount);
        /* string Email = 9 [json_name = "Email"]; */
        if (message.email !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.email);
        /* string CreatedAt = 10 [json_name = "CreatedAt"]; */
        if (message.createdAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message twitch.User
 */
export const User = new User$Type();
